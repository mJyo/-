package sien.wipm;

import plantu.custdb.*;
import sien.etcm.EtcmCommonFunction;
import tmesis.cmfn.CommonLogic;
import tmesis.cmfn.CommonUtil;
import tmesis.db.DbQuery;
import tmesis.db.QueryHelper;
import tmesis.db.QueryOrder;
import tmesis.db.TableQueryParas;
import tmesis.dbtypes.*;
import tmesis.exception.ServiceException;
import tmesis.global.GCDef;
import tmesis.logger.ALogger;
import tmesis.service.*;
import tmesis.util.Common;

import java.util.*;

import static tmesis.cmfn.CommonLogic.getGlobalOptionValue3;

public class WipmUpdateSelectLotList extends AbstractMesService {
    @Override
    public void doService(JsonBean inData, JsonBean outData) throws ServiceException {
        boolean bPJAvailable;
        //#14415 RTD选错PJ的话MES挑选自己的PJ 保证Lot可以Add queue成功 start
        JsonBean jsonRTDPJ;
        JsonBean jsonMESPJ;
        String RtdPJChange = getGlobalOptionValue3(this, JSON.getFactory(inData), "MP_AllowRtdPJChange");
        //#14415 RTD选错PJ的话MES挑选自己的PJ 保证Lot可以Add queue成功 end
        String sProcessJobGroupID = new String();
        String sProcessJobID = new String();
        String sLotID = new String();
        String sCarrierID = new String(); //Add by zhangchao @2022-12-05 for View Exception Handle Hist CarrierID
        String sRecipeID = new String();
        String sPortID = new String();
        String sSourceType= new String();
        String sBatchID= new String();
        //#11911 bs,br搬送问题处理
        String sStepType= new String();
        //#12170 判断RTD PJ逻辑修改
        String sRTDPJ=new String();
        //调用comm Function的checkCarrierTechAndGrp方法来进行对接口的卡控
        boolean SortToCarrierFlag = true;
        boolean bSorterFlag = false;
        PRPTDATAMAST prptdatamast2 = new PRPTDATAMAST();
        prptdatamast2.addValue("FACTORY",JSON.getFactory(inData));
        prptdatamast2.addValue("PROPERTY_TYPE","EQUIP");
        prptdatamast2.addValue("PROPERTY_KEY",inData.getString("EQUIP_ID"));
        prptdatamast2.addValue("PROPERTY_NAME","SELECT_TYPE");
        PRPTDATAMAST prptdatamastResult2=tableHelper.select(PRPTDATAMAST.class,prptdatamast2,new TableQueryParas(),"","ETCM-P0004");
        if (prptdatamastResult2!=null) {
            if (!CommonUtil.isEmpty(prptdatamastResult2.getValue("PROPERTY_VALUE", String.class))) {
                String Value = prptdatamastResult2.getValue("PROPERTY_VALUE", String.class);
                if (Value.equals("SORTER")) {
                    bSorterFlag = true;
                    JsonBean lotitem = new JsonBean();
                    JsonBeanList SUBLOT_LIST =new JsonBeanList();
                    JsonBeanList outList = inData.getList("LOT_LIST");
                    for (JsonBean itemCarrier:outList) {
                        inData.setString("TO_CARRIER_ID", itemCarrier.getString("TO_CARRIER_ID"));
                        inData.setString("SORTER_JOB_ID", itemCarrier.getString("SORTER_JOB_ID"));
                        inData.setString("SORTER_SUB_JOB_ID", itemCarrier.getString("SORTER_SUB_JOB_ID"));

                        QueryHelper queryHelper = new QueryHelper(this);
                        queryHelper.addParaValues("FACTORY", JSON.getFactory(inData));
                        queryHelper.addParaValues("SORTER_JOB_ID", inData.getString("SORTER_JOB_ID"));
                        queryHelper.addParaValues("SORTER_SUB_JOB_ID", inData.getString("SORTER_SUB_JOB_ID"));
                        queryHelper.setQueryId("WIPM_S_M_WIPMSTSJDFNT_ViewJOBRelatedLot2");
                        List<DbQuery> sublotList = queryHelper.query("WIPM-P0004");
                        for (DbQuery item : sublotList) {
                            lotitem.setString("SUB_LOT_ID", item.getValue("SUB_LOT_ID", String.class));
                            lotitem.setInt("TO_SLOT_NO", item.getValue("TO_SLOT_NO", int.class));
                            SUBLOT_LIST.addJsonBean(lotitem);
                        }
                        inData.setList("SUBLOT", SUBLOT_LIST);
                        WipmCommonFunction.checkCarrierTechAndGrp(this, inData, inData.getString("TO_CARRIER_ID"));
                        EtcmCommonFunction.checkCarrierStatus(this, inData, inData.getString("TO_CARRIER_ID"));

                    }
                }
            }
        }
        //锁定当前Equip ID对Select Lot List的的操作
        WipmCommonFunction.lockEquipByName(this, JSON.getFactory(inData), inData.getString("EQUIP_ID"), "A2_ADJUST_LOT", JSON.getUser(inData));

        if(JSON.getProcStep(inData)=='1'){//Insert Select Lot
            try
            {
                if(inData.getChar("FROM_RTD")=='Y') {
                    sSourceType="RTD";
                }else{
                    sSourceType="MES";
                }

                boolean bSameBatchCnt = false;
                ArrayList<String> doneSorterJobIDList = new ArrayList<String>();
                //Add by zhangchao@2023-01-06 For Sorter --start
                HashMap<String, String> lotId_carrierId = getLotCarrierMap_CheckCarrierType(inData);//Get Lot Carrier Map and Check Carrier Type
                HashMap<String, String> lotId_sorterJobIsSplitChangeFlag = new HashMap<>();
                if(lotId_carrierId.size() > 0)
                {
                    //if(checkSorterToCarrier(inData, lotId_carrierId))
                    //{
                        lotId_sorterJobIsSplitChangeFlag = getLotSorterJobIsSplit2ChangeFlag_Map(inData);

                        //First: Split toCarrierId should distinctive
                        String splitLotList = checkSplit2ChangeInSameFOUP(inData, lotId_carrierId, lotId_sorterJobIsSplitChangeFlag);
                        if(!Common.isEmpty(splitLotList))
                        {
                            sLotID = splitLotList.indexOf(';') < 0 ? (splitLotList):(splitLotList.substring(0, splitLotList.indexOf(';')));//For try catch exception and error history
                            throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName() + ".doService", "", "WIPM-P3141",
                                    "FACTORY", JSON.getFactory(inData),
                                    "EQUIP_ID", inData.getString("EQUIP_ID"),
                                    "LOT_ID", sLotID,
                                    "LOT_LIST", splitLotList);
                        }

                        //Second: Same Foup Change toCarrierId should use same
                        removeSameSorterJobInSameFOUP_ChangeLot(inData, lotId_carrierId, lotId_sorterJobIsSplitChangeFlag);
                    //}
                }
                //Add by zhangchao@2023-01-06 For Sorter --end
                for(JsonBean lotinfo:inData.getList("LOT_LIST")) {
                    sLotID = lotinfo.getString("LOT_ID");
                    sRecipeID= lotinfo.getString("RECIPE_ID");
                    sProcessJobGroupID= lotinfo.getString("PROC_JOB_GROUP_ID");
                    sPortID=lotinfo.getString("PORT_ID");

                    //Add by zhangchao@2022-12-29 SorterJob contains multi SorterSubJob, Wipmlottselt exist other sorterSubJob of this SorterJob Popup ErrMsg --start
                    if(!Common.isEmpty(lotinfo.getString("SORTER_JOB_ID")))
                    {
                        if (!doneSorterJobIDList.contains(lotinfo.getString("SORTER_JOB_ID"))) {
                            WIPMLOTTSELT selt = new WIPMLOTTSELT();
                            selt.addValue("FACTORY", JSON.getFactory(inData));
                            selt.addValue("SORTER_JOB_ID", lotinfo.getString("SORTER_JOB_ID"));
                            List<WIPMLOTTSELT> sameSorterJobLotListInQueue = tableHelper.selectList(WIPMLOTTSELT.class, selt, new TableQueryParas(), "WIPM-P0004");
                            if (sameSorterJobLotListInQueue.size() > 0) {
                                throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName() + ".doService", "", "WIPM-P3134", new String[]{
                                        "FACTORY", JSON.getFactory(inData),
                                        "EQUIP_ID", sameSorterJobLotListInQueue.get(0).getValue("EQUIP_ID", String.class),
                                        "LOT_ID", sameSorterJobLotListInQueue.get(0).getValue("LOT_ID", String.class)}
                                );
                            }
                        } else {
                            doneSorterJobIDList.add(lotinfo.getString("SORTER_JOB_ID"));
                        }
                    }
                    //Add by zhangchao@2022-12-29 SorterJob contains multi SorterSubJob, Wipmlottselt exist other sorterSubJob of this SorterJob Popup ErrMsg --end

                    //同一Foup中不可以存在已在其它机台Add Queue的Lot
                    WIPMLOTTMAST wipmlottmast = new WIPMLOTTMAST();
                    wipmlottmast.addValue("LOT_ID", sLotID);
                    WIPMLOTTMAST wipmlottmastResult = tableHelper.selectByKey(WIPMLOTTMAST.class, wipmlottmast, "WIPM-P0044", "WIPM-P0004");
                    //#12257 add queue问题点处理
                    //增加空foup校验
                    if(CommonUtil.isEmpty(wipmlottmastResult.getValue("CARRIER_ID",String.class))){
                        throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName() + ".doService", "", "WIPM-P0344", new String[]{
                                "FACTORY", JSON.getFactory(inData),
                                "EQUIP_ID", inData.getString("EQUIP_ID"),
                                "LOT_ID", sLotID}
                        );
                    }
                    sCarrierID = wipmlottmastResult.getValue("CARRIER_ID",String.class);//Add by zhangchao @2022-12-05 for View Exception Handle Hist CarrierID
                    //Add by zhangchao@2022-10-14 for check Port Carrier type and check Port Eqp Group -- start
//                    else
//                    {
//                        if(!EtcmCommonFunction.CheckPortGroupCarrier(this,
//                                inData,
//                                outData,
//                                inData.getString("PORT_ID"),
//                                wipmlottmastResult.getValue("CARRIER_ID",String.class), sLotID))
//                        {
//                            throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName() + ".doService", "", "ETCM-P0406", new String[]{
//                                    "EQUIP_ID", inData.getString("EQUIP_ID"), "PORT_ID", sPortID}
//                            );
//                        }
//                    }
                    //Add by zhangchao@2022-10-14 for check Port Carrier type and check Port Eqp Group -- end

                    WipmCommonFunction.lockCarrierForAddQ(this,JSON.getFactory(inData), sCarrierID, JSON.getUser(inData));//Modified by zhangchao@2023-02-26

                    //Add by zhangchao@2023-03-13 For Multi-Client use same FOUP as TO_CARRIER_ID AddQ --start
                    if (!Common.isEmpty(lotinfo.getString("TO_CARRIER_ID")) && !Common.isEmpty(lotinfo.getString("SORTER_JOB_ID")))
                    {
                        //Lock TO_CARRIER_ID
                        WipmCommonFunction.lockCarrierForAddQ(this,JSON.getFactory(inData), lotinfo.getString("TO_CARRIER_ID"), JSON.getUser(inData));
                        WipmCommonFunction.CheckA2CarrierUse(this,inData,lotinfo.getString("SORTER_JOB_ID"),"",lotinfo.getString("TO_CARRIER_ID"));
                    }
                    //Add by zhangchao@2023-03-13 For Multi-Client use same FOUP as TO_CARRIER_ID AddQ --end

                    WIPMOPERDFNT wipmoperdfnt = new WIPMOPERDFNT();
                    wipmoperdfnt.addValue("FACTORY", JSON.getFactory(inData));
                    wipmoperdfnt.addValue("OPER", wipmlottmastResult.getValue("OPER",String.class));
                    WIPMOPERDFNT wipmoperdfntResult = tableHelper.selectByKey(WIPMOPERDFNT.class, wipmoperdfnt, "WIPM-P0010", "WIPM-P0004");
                    //#11911 bs,br搬送问题处理
                    sStepType=wipmoperdfntResult.getValue("OPER_GRP_1",String.class);

                    WIPMLOTTSELT wipmlottselt = new WIPMLOTTSELT();
                    wipmlottselt.addValue("FACTORY",JSON.getFactory(inData));
                    wipmlottselt.addValue("EQUIP_ID",inData.getString("EQUIP_ID"));
                    wipmlottselt.addValue("CARRIER_ID",wipmlottmastResult.getValue("CARRIER_ID",String.class));
                    TableQueryParas tableQueryParas = new TableQueryParas();
                    tableQueryParas.addSpecialOperation("EQUIP_ID","<>");

                    //Redmine 12107 --start
                    List<WIPMLOTTSELT> wipmlottseltResultList = tableHelper.selectList(WIPMLOTTSELT.class, wipmlottselt,tableQueryParas,"WIPM-P0004");

                    //passFlag Means another lot in the same Foup and it's PROCESS.HOLD and Carrier Location_2 is not AddedQueue EQP, should pass.
                    Boolean passFlag = true;//One Foup One Lot, should pass.
                    WIPMLOTTSELT currentItem = new WIPMLOTTSELT();
                    for( WIPMLOTTSELT wipmlottseltResult: wipmlottseltResultList ) {
                        if (wipmlottseltResult != null) {
                            WIPMLOTTMAST wipmlottmast1 = new WIPMLOTTMAST();
                            wipmlottmast1.addValue("LOT_ID", wipmlottseltResult.getValue("LOT_ID", String.class));
                            WIPMLOTTMAST wipmlottmast1Result = tableHelper.selectByKey(WIPMLOTTMAST.class, wipmlottmast1, "WIPM-P0044", "WIPM-P0004");
                            if (wipmlottseltResult.getValue("CARRIER_ID", String.class).equals(wipmlottmast1Result.getValue("CARRIER_ID", String.class)))
                            {
                                ETCMCARRMAST etcmcarrmast = new ETCMCARRMAST();
                                etcmcarrmast.addValue("CARRIER_ID", wipmlottseltResult.getValue("CARRIER_ID", String.class));
                                ETCMCARRMAST etcmcarrmastResult = tableHelper.selectByKey(ETCMCARRMAST.class,
                                        etcmcarrmast, "ETCM-P0057", "ETCM-P0004");
                                if((!etcmcarrmastResult.getValue("LOCATION_2", String.class).equals(wipmlottseltResult.getValue("EQUIP_ID", String.class)))
                                    && wipmlottmast1Result.getValue("LOT_STATUS", String.class).equals("PROC")
                                        && wipmlottmast1Result.getValue("HOLD_YN", char.class) == 'Y')
                                {
                                    passFlag = true;
                                }
                                else
                                {
                                    currentItem = wipmlottseltResult;
                                    passFlag = false;
                                    break;
                                }
                            }
                        }
                    }
                    if(!passFlag)
                    {
                        throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName() + ".doService", "", "FABM-P0272", new String[]{
                                "FACTORY", JSON.getFactory(inData),
                                "EQUIP_ID", currentItem.getValue("EQUIP_ID", String.class),
                                "CARRIER_ID", currentItem.getValue("CARRIER_ID", String.class),
                                "LOT_ID", currentItem.getValue("LOT_ID", String.class)}
                        );
                    }
					//Redmine 12107 --end
                    sBatchID=wipmlottmastResult.getValue("BATCH_ID",String.class);
                    //#11728 Batch ID Lot校验Equip ID必须一致
                    if(!CommonUtil.isEmpty(wipmlottmastResult.getValue("BATCH_ID",String.class))
                            && (wipmoperdfntResult.getValue("OPER_GRP_1",String.class).equals("BC")
                            || wipmoperdfntResult.getValue("OPER_GRP_1",String.class).equals("BA")
                            || wipmoperdfntResult.getValue("OPER_GRP_1",String.class).equals("CR"))){
                        WIPMBTCHDFNT wipmbtchdfnt = new WIPMBTCHDFNT();
                        wipmbtchdfnt.addValue("FACTORY", JSON.getFactory(inData));
                        wipmbtchdfnt.addValue("BATCH_ID", wipmlottmastResult.getValue("BATCH_ID",String.class));
                        tableQueryParas = new TableQueryParas();
                        tableQueryParas.setForceSingleRow(true);
                        WIPMBTCHDFNT wipmbtchdfntResult = tableHelper.select(WIPMBTCHDFNT.class, wipmbtchdfnt,
                                tableQueryParas, "WIPM-P0196", "WIPM-P0004");
                        if(!wipmbtchdfntResult.getValue("EQUIP_ID",String.class).equals(inData.getString("EQUIP_ID"))){
                            throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName() + ".doService", "", "ETCM-P0422", new String[]{
                                    "FACTORY", JSON.getFactory(inData),
                                    "EQUIP_ID", inData.getString("EQUIP_ID"),
                                    "BATCH_EQUIP_ID", wipmbtchdfntResult.getValue("EQUIP_ID",String.class),
                                    "LOT_ID",wipmlottmastResult.getValue("LOT_ID",String.class)}
                            );
                        }
                        //校验客户端传值Batch数量与数据库是否一致
                        if(!bSameBatchCnt){
                            QueryHelper queryHelper = new QueryHelper(this);
                            queryHelper.setQueryId("WIPM_M_WIPMBTCHDFNT_GETALLBATCHLOTLIST");
                            queryHelper.addParaValues("FACTORY", JSON.getFactory(inData));
                            queryHelper.addParaValues("BATCH_ID", wipmlottmastResult.getValue("BATCH_ID",String.class));
                            ArrayList<DbQuery> AllBatchLotList = queryHelper.query("COMM-P0004");
                            if(inData.getList("LOT_LIST").size()!=AllBatchLotList.size()){
                                throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName() + ".doService", "", "WIPM-P0315", new String[]{
                                        "FACTORY", JSON.getFactory(inData),
                                        "BATCH_ID", wipmlottmastResult.getValue("BATCH_ID",String.class)}
                                );
                            }
                            bSameBatchCnt=true;
                        }
                    }


                }

                //Equip触发Season时，如果不存在已经Assign的Season Lot需要提示
                //------------------------------------------------------------------------------------
                //Get Season Type
                JsonBean seasontypeIndata = new JsonBean();
                JsonBean seasontypeOutdata = new JsonBean();
                JSON.copyInParas(inData, seasontypeIndata);
                JSON.setProcStep(seasontypeIndata, '1');
                seasontypeIndata.setString("EQUIP_ID", inData.getString("EQUIP_ID"));
                seasontypeIndata.setString("LOT_ID", sLotID);
                AbstractMesService seasontype = ServiceMapper.getServiceObject("WIPM", "WipmGetSeasonType");
                seasontype.innerCall(this, seasontypeIndata, seasontypeOutdata);
                //------------------------------------------------------------------------------------
                if (seasontypeOutdata.getChar("SEASON_FLAG") == 'Y') {
                    //------------------------------------------------------------------------------------
                    //Get Season Lot
                    JsonBean seasonlotIndata = new JsonBean();
                    JsonBean seasonlotOutdata = new JsonBean();
                    seasonlotIndata = Common.deepCopy(seasontypeOutdata);
                    JSON.setProcStep(seasonlotIndata, '1');
                    JSON.copyInParas(inData, seasonlotIndata);
                    seasonlotIndata.setChar("SKIP_CHECK_FLAG",'Y');
                    AbstractMesService seasonlot = ServiceMapper.getServiceObject("WIPM", "WipmGetSeasonLotList");
                    seasonlot.innerCall(this, seasonlotIndata, seasonlotOutdata);
                    //------------------------------------------------------------------------------------
                    JsonBeanList nolotlist = new JsonBeanList();
                    for (JsonBean season : seasonlotOutdata.getList("SEASON_LIST")) {
                        if (season.getList("LOT_LIST").size() == 0) {
                            //MES找不到已经Assign的Season Lot
                            JsonBean nolot = new JsonBean();
                            nolot.setString("EQUIP_ID",season.getString("EQUIP_ID"));
                            nolot.setString("SUB_EQUIP_ID",season.getString("SUB_EQUIP_ID"));
                            nolot.setString("SEASON_JOB_GROUP_ID",season.getString("SEASON_JOB_GROUP_ID"));
                            nolot.setInt("SEASON_JOB_SEQ",season.getInt("SEASON_JOB_SEQ"));
                            nolot.setInt("NPW_PCS",season.getInt("NPW_PCS"));
                            nolotlist.addJsonBean(nolot);
                        }
                    }
                    if(nolotlist.size()>0){
                        outData.setList("NOLOT_LIST",nolotlist);
                    }
                }


                // Check Eqp ----------------------------------------------------------------------------
                WipmCommonFunction.checkA2EqpTransferbyManual(this, inData.getString("EQUIP_ID"), "N");

                //检查当前设备的select表lot的carrier数量是否已达到equip的设置 （Add queue时PROC_LOT_COUNT+SAFTY_LOT_COUNT必须大于carrier数量）
                int iProcLotCount=0;
                int iSaftyLotCount=0;
                PRPTDATAMAST prptdatamast = new PRPTDATAMAST();
                prptdatamast.addValue("FACTORY", JSON.getFactory(inData));
                prptdatamast.addValue("PROPERTY_TYPE", GCDef.PROP_TYPE_EQUIP);
                prptdatamast.addValue("PROPERTY_NAME", "PROC_LOT_COUNT");
                prptdatamast.addValue("PROPERTY_KEY", inData.getString("EQUIP_ID"));
                TableQueryParas tableQueryParas1 = new TableQueryParas();
                tableQueryParas1.setForceSingleRow(true);
                PRPTDATAMAST prptdatamastResult = tableHelper.select(PRPTDATAMAST.class,prptdatamast,tableQueryParas1,"","ETCM-P0004");
                if (prptdatamastResult == null || CommonUtil.isEmpty(prptdatamastResult.getValue("PROPERTY_VALUE", String.class))) {
                    throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName() + ".doService", "", "FABM-P0231", new String[]{
                            "FACTORY", JSON.getFactory(inData),
                            "EQUIP_ID", inData.getString("EQUIP_ID"),
                            "PROC_LOT_COUNT",""}
                    );
                }else {
                    iProcLotCount=CommonUtil.atoi(prptdatamastResult.getValue("PROPERTY_VALUE", String.class));
                }
                prptdatamast = new PRPTDATAMAST();
                prptdatamast.addValue("FACTORY", JSON.getFactory(inData));
                prptdatamast.addValue("PROPERTY_TYPE", GCDef.PROP_TYPE_EQUIP);
                prptdatamast.addValue("PROPERTY_NAME", "SAFTY_LOT_COUNT");
                prptdatamast.addValue("PROPERTY_KEY", inData.getString("EQUIP_ID"));
                tableQueryParas1 = new TableQueryParas();
                tableQueryParas1.setForceSingleRow(true);
                prptdatamastResult = tableHelper.select(PRPTDATAMAST.class,prptdatamast,tableQueryParas1,"","ETCM-P0004");
                if (prptdatamastResult == null || CommonUtil.isEmpty(prptdatamastResult.getValue("PROPERTY_VALUE", String.class))) {
                    throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName() + ".doService", "", "FABM-P0232", new String[]{
                            "FACTORY", JSON.getFactory(inData),
                            "EQUIP_ID", inData.getString("EQUIP_ID"),
                            "SAFTY_LOT_COUNT",""}
                    );
                }else {
                    iSaftyLotCount=CommonUtil.atoi(prptdatamastResult.getValue("PROPERTY_VALUE", String.class));
                }

                JsonBeanList lotlist = inData.getList("LOT_LIST");

                //#12617 调整group id生成方式
                String stranTime = ServiceUtil.getSysTime(this);

                inData.setString("GROUP_ID", "G-"+ UUID.randomUUID().toString());
                inData.setString("SELECT_ID", "S-"+ UUID.randomUUID().toString());
                //#12617 调整group id生成方式

                //Generate ID
                /*
                String stranTime = ServiceUtil.getSysTime(this);
                String sYear=stranTime.substring(2,4);
                String sMonth=stranTime.substring(4,6);
                String sDay=stranTime.substring(6,8);
                String sHour=stranTime.substring(8,10);
                String sMin=stranTime.substring(10,12);
                String sSec=stranTime.substring(12,14);
                JsonBean generate = new JsonBean();
                JsonBean generate_out = new JsonBean();
                JSON.copyInParas(inData, generate);
                JSON.setProcStep(generate, '2');
                generate.setString("RULE_ID", "A2_GROUP_ID");
                generate.setString("KEY_FACTORY", JSON.getFactory(inData));
                generate.setString("SEQ_KEY_1", "G-"+inData.getString("EQUIP_ID")+"-"+sYear+sMonth+sDay+sHour+sMin+sSec);

                AbstractMesService svcgenerate = ServiceMapper.getServiceObject("WIPM", "WipmGenerateId");
                svcgenerate.innerCall(this, generate, generate_out);
                if (ServiceUtil.stringIsEmpty(generate_out, "GEN_ID")) {
                    throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName() + ".doService", "", "WIPM-P0004", new String[]{
                            "FACTORY", JSON.getFactory(inData), "RULE_ID", "A2_GROUP_ID"}
                    );
                } else {
                    inData.setString("GROUP_ID", generate_out.getString("GEN_ID"));
                    inData.setString("CONFIRM_KEY", generate_out.getString("CONFIRM_KEY"));
                }

                JsonBean confirm = new JsonBean();
                JSON.copyInParas(inData, confirm);
                confirm.setString("GEN_ID", inData.getString("GROUP_ID"));
                confirm.setString("CONFIRM_KEY", inData.getString("CONFIRM_KEY"));
                AbstractMesService svcconfirm = ServiceMapper.getServiceObject("WIPM", "WipmConfirmGeneratedId");
                svcconfirm.innerCall(this, confirm, outData);

                generate = new JsonBean();
                generate_out = new JsonBean();
                JSON.copyInParas(inData, generate);
                JSON.setProcStep(generate, '2');
                generate.setString("RULE_ID", "A2_SELECT_ID");
                generate.setString("KEY_FACTORY", JSON.getFactory(inData));
                generate.setString("SEQ_KEY_1", "S-"+inData.getString("EQUIP_ID")+"-"+sYear+sMonth+sDay+sHour+sMin+sSec);

                svcgenerate = ServiceMapper.getServiceObject("WIPM", "WipmGenerateId");
                svcgenerate.innerCall(this, generate, generate_out);
                if (ServiceUtil.stringIsEmpty(generate_out, "GEN_ID")) {
                    throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName() + ".doService", "", "WIPM-P0004", new String[]{
                            "FACTORY", JSON.getFactory(inData), "RULE_ID", "A2_SELECT_ID"}
                    );
                } else {
                    inData.setString("SELECT_ID", generate_out.getString("GEN_ID"));
                    inData.setString("CONFIRM_KEY", generate_out.getString("CONFIRM_KEY"));
                }

                confirm = new JsonBean();
                JSON.copyInParas(inData, confirm);
                confirm.setString("GEN_ID", inData.getString("SELECT_ID"));
                confirm.setString("CONFIRM_KEY", inData.getString("CONFIRM_KEY"));
                svcconfirm = ServiceMapper.getServiceObject("WIPM", "WipmConfirmGeneratedId");
                svcconfirm.innerCall(this, confirm, outData);
                */
                prptdatamast = new PRPTDATAMAST();
                prptdatamast.addValue("FACTORY", JSON.getFactory(inData));
                prptdatamast.addValue("PROPERTY_TYPE", GCDef.PROP_TYPE_EQUIP);
                prptdatamast.addValue("PROPERTY_NAME", "SELECT_TYPE");
                prptdatamast.addValue("PROPERTY_KEY", inData.getString("EQUIP_ID"));
                TableQueryParas tableQueryParas3 = new TableQueryParas();
                tableQueryParas3.setForceSingleRow(true);
                prptdatamastResult = tableHelper.select(PRPTDATAMAST.class,prptdatamast,tableQueryParas3,"","ETCM-P0004");

                Set<String> alreadyCheckLotBatchId = new HashSet<>();
                ArrayList<String> slotlist = new ArrayList<String>();
                boolean sorterSplitFirstLotAdded = false;
                HashMap<JsonBean, WIPMLOTTSELT> apcMap = new HashMap();
                List<String> pirunLayer = new ArrayList<>();
                ArrayList<String> ContaminationList = new ArrayList<>();
//                boolean addQueue_flag = false;
                for(JsonBean lotinfo:lotlist){
                    //#14415 RTD选错PJ的话MES挑选自己的PJ 保证Lot可以Add queue成功 start
                    jsonRTDPJ= new JsonBean();
                    jsonMESPJ= new JsonBean();
                    //#14415 RTD选错PJ的话MES挑选自己的PJ 保证Lot可以Add queue成功 End
                    //For Multi-Lot in one Foup
                    List<WIPMLOTTMAST> sameCarrierlots = getSameCarrierLots(lotinfo.getString("LOT_ID"), lotinfo.getString("SORTER_JOB_ID"));
                    WIPMLOTTSELT wipmlottselt1 = new WIPMLOTTSELT();
                    wipmlottselt1.addValue("EQUIP_ID", inData.getString("EQUIP_ID"));
                    wipmlottselt1.addValue("LOT_STATUS", "SELECT");
                    TableQueryParas tableQueryParas = new TableQueryParas();
                    tableQueryParas.setScalarFieldCond("NVL(MAX(SEQ),0) AS SEQ");
                    int iSeq = 1 + (int) tableHelper.selectScalar(WIPMLOTTSELT.class, wipmlottselt1, tableQueryParas, "WIPM-P0004");//Same Carrier Use same seq
                    //Furnace Dummy Exchange
                    //FABB #13060 Dummy Exchange Furnace 功能 :
                    String dumExcOption = CommonLogic.getGlobalOptionValue3(this, JSON.getFactory(inData), "MP_UseDummyExchange");
                    if( "Y".equals(dumExcOption)) {
                        iSeq = DummyExchangeResetSelectSeq(inData, sameCarrierlots.get(0), wipmlottselt1, iSeq);
                    }
                    //FABB #14047 R2MAddQueue 带Flag的Lot放在前面
                    if("Y".equals(lotinfo.getString("IS_ABSOLUTE_PRIORITY"))){
                        iSeq = absolutePriority(inData, sameCarrierlots.size(), inData.getString("EQUIP_ID"), iSeq);
                    }

                    List<String> hasSorterLotList = getCurrentLotSorterJobContainsLotList(JSON.getFactory(inData),
                            lotinfo.getString("SORTER_JOB_ID"),
                            lotinfo.getString("SORTER_SUB_JOB_ID"));

                    String contaminationCode = null;
                    sorterSplitFirstLotAdded = false;
                    for (int indexOfSameCarrier = 0; indexOfSameCarrier < sameCarrierlots.size(); indexOfSameCarrier++) {
                        inData.setString("SKIP_CONSTRAINT", "N");
                        SortToCarrierFlag = true;
                        boolean hasError = false;
                        String sLotId = sameCarrierlots.get(indexOfSameCarrier).getValue("LOT_ID", String.class);//LotId
                        boolean isMainOperationLot = sLotId.equals(lotinfo.getString("LOT_ID"));

                        if(lotId_sorterJobIsSplitChangeFlag.get(sLotId) != null && lotId_sorterJobIsSplitChangeFlag.get(sLotId).equals("Y"))
                        {
                            if (sorterSplitFirstLotAdded) {
                                break;//Do not auto add same FOUP lot to Queue for Action is 'SPLIT' ――> 'CHANGE' lot
                            } else {
                                sorterSplitFirstLotAdded = true;
                            }
                        }

                        sCarrierID = sameCarrierlots.get(indexOfSameCarrier).getValue("CARRIER_ID", String.class);//Add by zhangchao @2022-12-05 for View Exception Handle Hist CarrierID
                        //Add by zhangchao@2022-08-31 for Multi-Sorter_Job --start
                        WIPMLOTTMAST wipmlottmast = new WIPMLOTTMAST();
                        wipmlottmast.addValue("LOT_ID", sLotId);
                        WIPMLOTTMAST wipmlottmastResult = tableHelper.selectByKey(WIPMLOTTMAST.class, wipmlottmast, "WIPM-P0044", "WIPM-P0004");

                        //20221109 #13001 新增EQUIP_CARRIER_TYPE卡控，FullAuto 设备在进行 Add Queue ReserveManual Tracsfer时候，需要检查当前Caaier类型是否允许进入设备
                        Boolean bEquipCarrierTypeCheck = EtcmCommonFunction.CheckFullAutoEquipCarrier(this, inData, outData,  wipmlottmastResult.getValue("CARRIER_ID", String.class));
                        if (!bEquipCarrierTypeCheck) {
                            throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName() + ".doService", "", "ETCM-P0435", new String[]{
                                    "EQUIP_ID", inData.getString("EQUIP_ID"),
                                    "Carrier ID", wipmlottmastResult.getValue("CARRIER_ID", String.class)}
                            );
                        }

                        // Redmine FABB #12639 对于 Multi Lot In A Foup 情况下, 如果当前 Foup 存在处于 Inline Sorter 状态, 卡控 Foup 内 所有Lot 的污染等级
                        WIPMSTSJDFNT wipmstsjdfnt = new WIPMSTSJDFNT();
                        wipmstsjdfnt.addValue("FACTORY", JSON.getFactory(inData));
                        wipmstsjdfnt.addValue("FROM_CARRIER_ID", wipmlottmastResult.getValue("CARRIER_ID", String.class));
                        wipmstsjdfnt.addValue("SUB_JOB_STATUS", "CREATE");
                        wipmstsjdfnt.addValue("SUB_JOB_USC_3", "Y");
                        int fromCnt = (int) tableHelper.selectScalar(WIPMSTSJDFNT.class, wipmstsjdfnt, "WIPM-P0004");
                        wipmstsjdfnt = new WIPMSTSJDFNT();
                        wipmstsjdfnt.addValue("FACTORY", JSON.getFactory(inData));
                        wipmstsjdfnt.addValue("TO_CARRIER_ID", wipmlottmastResult.getValue("CARRIER_ID", String.class));
                        wipmstsjdfnt.addValue("SUB_JOB_STATUS", "CREATE");
                        wipmstsjdfnt.addValue("SUB_JOB_USC_3", "Y");
                        int toCnt = (int) tableHelper.selectScalar(WIPMSTSJDFNT.class, wipmstsjdfnt, "WIPM-P0004");
                        //当前Carrier 处于 Inline Sorter 下
                        if(fromCnt > 0 || toCnt > 0){
                            QueryHelper query = new QueryHelper(this);
                            query.setQueryId("WIPM_S_E_WIPMSTSJITEM_IsInlineSorterLot");
                            query.addParaValues("FACTORY", JSON.getFactory(inData));
                            query.addParaValues("LOT_ID", wipmlottmastResult.getValue("LOT_ID", String.class));
                            ArrayList<DbQuery> isInlineSorter = query.query("COMM-P0004");
                            // Redmine FABB #12639 对于 Multi Lot In A Foup 情况下, 如果当前 Foup 存在处于 Inline Sorter 状态, 卡控 Foup 内 所有Lot 的污染等级
                            if (isInlineSorter.size() > 0) {
                                //Inline Sort Lot
                                if (contaminationCode == null) {
                                    contaminationCode = wipmlottmastResult.getValue("LOT_USC_11", String.class);
                                } else {
                                    //Inline Sort Lot Check LOT_USC_11
                                    if (!wipmlottmastResult.getValue("LOT_USC_11", String.class).equals(contaminationCode)) {
                                        throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName() + "", "", "WIPM-P3070",
                                                "CARRIER_ID", wipmlottmastResult.getValue("CARRIER_ID",
                                                String.class));
                                    }
                                }
                            } else {
                                //Add by zhangchao@2022-12-28 for inline sorter --start
                                /********* Other Lot ***********************************
                                 *  mainOperation lot has sorterJob: Check in mainOperation sorterJob lotList contamination
                                 *  mainOperation lot has not sorterJob: Check other not has sorterJob lotList contamination
                                 ******************************************************/
                                if(CommonUtil.isEmpty(lotinfo.getString("SORTER_JOB_ID")))//Current main operation lot sorter_job_id
                                {//mainOperation lot is not sorter lot: Check other not has sorterJob lot list contamination
                                    WIPMROUTOPER wipmroutoper = new WIPMROUTOPER();
                                    wipmroutoper.addValue("FACTORY", JSON.getFactory(inData));
                                    wipmroutoper.addValue("ROUTE", wipmlottmastResult.getValue("ROUTE", String.class));
                                    wipmroutoper.addValue("ROUTE_VER", wipmlottmastResult.getValue("ROUTE_VER", String.class));
                                    wipmroutoper.addValue("OPER", wipmlottmastResult.getValue("OPER", String.class));
                                    WIPMROUTOPER wipmroutoperResult = tableHelper.selectByKey(WIPMROUTOPER.class, wipmroutoper, "WIPM-P0010", "WIPM-P0004");
                                    if (contaminationCode == null) {
                                        contaminationCode = wipmroutoperResult.getValue("RO_USC_2", String.class);
                                    } else {
                                        if (!wipmroutoperResult.getValue("RO_USC_2", String.class).equals(contaminationCode)) {
                                            throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName() + "", "", "WIPM-P3070",
                                                    "CARRIER_ID", wipmlottmastResult.getValue("CARRIER_ID",
                                                    String.class));
                                        }
                                    }
                                }
                                else
                                {//mainOperation lot is sorter lot: Check in mainOperation sorterJob lot list contamination
                                    if (hasSorterLotList.contains(sLotId)) {
                                        if (contaminationCode == null) {
                                            contaminationCode = wipmlottmastResult.getValue("LOT_USC_11", String.class);
                                        } else {
                                            if (!wipmlottmastResult.getValue("LOT_USC_11", String.class).equals(contaminationCode)) {
                                                throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName() + "", "", "WIPM-P3070",
                                                        "CARRIER_ID", wipmlottmastResult.getValue("CARRIER_ID",
                                                        String.class));
                                            }
                                        }
                                    }
                                }
                                //Add by zhangchao@2022-12-28 for inline sorter --end
                            }
                        }


                        //FABB #14438 RTD 自动补充加Queue 开关， 为 'Y' 时不自动补充加Queue 需求与原有逻辑冲突的处理
                        String mp_allowRTDAnotherLotSameFoup = getGlobalOptionValue3(this, JSON.getFactory(inData), "MP_AllowRTDAnotherLotSameFoup");
                        if( ! (inData.getBoolean("FROM_R2M_ADD_QUEUE") && "Y".equals(mp_allowRTDAnotherLotSameFoup))){
                            //Add by zhangchao@2022-08-31 for Multi-Sorter_Job --start
                            if(slotlist.contains(sLotId) && CommonUtil.isEmpty(lotinfo.getString("SORTER_JOB_ID"))){
                                continue;
                            }else{
                                //#11911 bs,br搬送问题处理
                                if(!CommonUtil.isEmpty(sBatchID) && (!sStepType.equals("BC") && !sStepType.equals("CR") && !sStepType.equals("BA"))){
                                    WIPMFHGDDFNT wipmfhgddfnt = new WIPMFHGDDFNT();
                                    wipmfhgddfnt.addValue("FACTORY", JSON.getFactory(inData));
                                    wipmfhgddfnt.addValue("FINISH_GOOD_ID", wipmlottmastResult.getValue("FINISH_GOOD_ID", String.class));
                                    wipmfhgddfnt.addValue("FINISH_GOOD_VER", wipmlottmastResult.getValue("FINISH_GOOD_VER", int.class));
                                    WIPMFHGDDFNT wipmfhgddfntResult = tableHelper.selectByKey(WIPMFHGDDFNT.class, wipmfhgddfnt, "WIPM-P0589", "WIPM-P0004");
                                    if(!wipmfhgddfntResult.getValue("FINISH_GOOD_TYPE", String.class).equals("NPW")) {
                                        continue;
                                    }
                                }
                                if (!slotlist.contains(sLotId)){
                                    slotlist.add(sLotId);
                                }
                            }
                        }

                        //FABB #14438 RTD 自动补充加Queue 开关， 为 'Y' 时不自动补充加Queue
                        if(inData.getBoolean("FROM_R2M_ADD_QUEUE")){
                            if ("Y".equals(mp_allowRTDAnotherLotSameFoup)) {
                                if(!isMainOperationLot){
                                    continue;
                                }
                            }
                        }
                        //FABB #12973 Multi Lot In One Foup 情况下，MES 自动进行补充 Add Queue 功能开关
                        //Mes 自动补充加Queue 开关， 为 'Y' 时不自动补充加Queue
                        String mp_allowAddAnotherLotSameFoup = getGlobalOptionValue3(this, JSON.getFactory(inData), "MP_AllowAddAnotherLotSameFoup");
                        //机台 自动补充加Queue  属性， 为 ’Y‘ 时自动补充加Queue
                        prptdatamast = new PRPTDATAMAST();
                        prptdatamast.addValue("FACTORY", JSON.getFactory(inData));
                        prptdatamast.addValue("PROPERTY_TYPE", GCDef.PROP_TYPE_EQUIP);
                        prptdatamast.addValue("PROPERTY_NAME", "SELECT_FOUP_ALL_LOT_YN");
                        prptdatamast.addValue("PROPERTY_KEY", inData.getString("EQUIP_ID"));
                        tableQueryParas1 = new TableQueryParas();
                        tableQueryParas1.setForceSingleRow(true);
                        PRPTDATAMAST prptdatamastResult1 = tableHelper.select(PRPTDATAMAST.class,prptdatamast,tableQueryParas1,"","ETCM-P0004");
                        //Mes 自动补充加Queue 开关为‘Y', 当前Lot 不是主操作Lot，且机台属性不为’Y‘ 时跳过
                        if("Y".equals(mp_allowAddAnotherLotSameFoup)
                                && (prptdatamastResult1 == null
                                || ! "Y".equals(prptdatamastResult1.getValue("PROPERTY_VALUE", String.class))) && inData.getChar("DUMMY_FLAG") != 'Y'){
                            //判断Carrier 是否已有Lot加至队列
                            if(isMainOperationLot){
                                WIPMLOTTSELT wipmlottselt = new WIPMLOTTSELT();
                                wipmlottselt.addValue("CARRIER_ID", wipmlottmastResult.getValue("CARRIER_ID", String.class));
                                wipmlottselt.addValue("EQUIP_ID", inData.getString("EQUIP_ID"));
                                ArrayList<WIPMLOTTSELT> wipmlottselts = tableHelper.selectList(WIPMLOTTSELT.class, wipmlottselt, new TableQueryParas(), "WIPM-P0004");//Same Carrier Use same seq
                                for (WIPMLOTTSELT selt : wipmlottselts) {
                                    if (CommonUtil.isEmpty(selt.getValue("TO_CARRIER_ID", String.class))){
                                        WIPMLOTTMAST wipmlottmast1 = new WIPMLOTTMAST();
                                        wipmlottmast1.addValue("LOT_ID", selt.getValue("LOT_ID", String.class));
                                        WIPMLOTTMAST wipmlottmast1Result = tableHelper.selectByKey(WIPMLOTTMAST.class, wipmlottmast1, "", "WIPM-P0004");
                                        if( ! wipmlottmast1Result.getValue("LOT_STATUS", String.class).equals("PROC")
                                                ||  wipmlottmast1Result.getValue("HOLD_YN", char.class) != 'Y'){
                                            throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName(), "", "FABM-P0272", "FACTORY", JSON.getFactory(inData),
                                                    "LOT_ID", sLotId,
                                                    "EQUIP_ID", inData.getString("EQUIP_ID"));
                                        }
                                    }
                                }
                            }else{
                                continue;
                            }
                        }

                        try {
                            WIPMLOTTSELT wipmlottselt = new WIPMLOTTSELT();
                            boolean isOfflineSorter=false;
                            //Sorter offline Job无需校验逻辑，直接插入add queue表数据
                            wipmstsjdfnt = new WIPMSTSJDFNT();
                            wipmstsjdfnt.addValue("FACTORY", JSON.getFactory(inData));
                            wipmstsjdfnt.addValue("SORTER_JOB_ID", lotinfo.getString("SORTER_JOB_ID"));

                            String sorter_sub_job_id = getSorterSubJobId(JSON.getFactory(inData),
                                    lotinfo.getString("SORTER_JOB_ID"),
                                    wipmlottmastResult.getValue("CARRIER_ID", String.class),
                                    sLotId);
                            wipmstsjdfnt.addValue("SORTER_SUB_JOB_ID", sorter_sub_job_id);
                            wipmstsjdfnt.addValue("SUB_JOB_STATUS", "CREATE");

                            if(!CommonUtil.isEmpty(lotinfo.getString("SORTER_JOB_ID")))
                            {//Multi-lot in one Foup not mainLot in sorterItem continue, else if is mainlot not in sorterItem popup error.
                                WIPMSTSJITEM sortItem = new WIPMSTSJITEM();
                                sortItem.addValue("FACTORY",        JSON.getFactory(inData));
                                sortItem.addValue("FROM_LOT_ID",    sLotId);
                                sortItem.addValue("SORTER_JOB_ID",  lotinfo.getString("SORTER_JOB_ID"));
                                if (tableHelper.selectScalar(WIPMSTSJITEM.class, sortItem, "WIPM-P0004") < 1)
                                {//Dose not exist in Sorter Job
                                    if (isMainOperationLot)
                                    {
                                        throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName(), "", "FABM-P0221",
                                                "FACTORY", JSON.getFactory(inData),
                                                "FROM_LOT_ID", sLotId,
                                                "SORTER_JOB_ID", lotinfo.getString("SORTER_JOB_ID"),
                                                "EQUIP_ID", inData.getString("EQUIP_ID"));
                                    } else {
                                        continue;
                                    }
                                }
                            }

                            WIPMSTSJDFNT wipmstsjdfntResult = tableHelper.selectByKey(WIPMSTSJDFNT.class, wipmstsjdfnt, "", "WIPM-P0004");
                            if (wipmstsjdfntResult!=null && !wipmstsjdfntResult.getValue("SUB_JOB_USC_3",String.class).equals("Y")){
                                isOfflineSorter=true;
                            }
                            //inline sorter merge 如果当前sorter job存在已经add queue的sub sorter job，则使用之前的to_carrier_id
//                            String tran_type = "";
//                            if (wipmstsjdfntResult!=null){
//                                tran_type = wipmstsjdfntResult.getValue("TRAN_TYPE", String.class);
//                            }
//                            if(!isOfflineSorter && "CHANGE".equals(tran_type)){
//                                WIPMSTSJDFNT wipmstsjdfnt1 = new WIPMSTSJDFNT();
//                                wipmstsjdfnt1.addValue("FACTORY", JSON.getFactory(inData));
//                                wipmstsjdfnt1.addValue("SORTER_JOB_ID", lotinfo.getString("SORTER_JOB_ID"));
//                                wipmstsjdfnt1.addValue("SORTER_SUB_JOB_ID", sorter_sub_job_id);
//                                wipmstsjdfnt1.addValue("TRAN_TYPE", tran_type);
//                                wipmstsjdfnt1.addValue("SUB_JOB_STATUS", "CANCEL");
//                                wipmstsjdfnt1.addValue("TO_CARRIER_ID", " ");
//                                TableQueryParas tableQueryParas2 = new TableQueryParas();
//                                tableQueryParas2.setForceSingleRow(true);
//                                tableQueryParas2.addSpecialOperation("SORTER_SUB_JOB_ID", "<>");
//                                tableQueryParas2.addSpecialOperation("SUB_JOB_STATUS", "<>");
//                                tableQueryParas2.addSpecialOperation("TO_CARRIER_ID", "<>");
//                                WIPMSTSJDFNT wipmstsjdfntResult1 = tableHelper.select(WIPMSTSJDFNT.class, wipmstsjdfnt1, tableQueryParas2, "", "WIPM-P0004");
//                                if (wipmstsjdfntResult1 != null
//                                        && !wipmstsjdfntResult1.getValue("TO_CARRIER_ID", String.class).equals(lotinfo.getString("TO_CARRIER_ID"))){
//                                            /*throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName(), "", "WIPM-P3127", new String[]{
//                                                    "FACTORY", JSON.getFactory(inData),
//                                                    "LOT_ID", sLotId,
//                                                    "TO_CARRIER_ID", lotinfo.getString("TO_CARRIER_ID"),
//                                                    "ALREADY CHOOSE TO_CARRIER_ID", wipmstsjdfntResult1.getValue("TO_CARRIER_ID", String.class)
//                                            });*/
//                                    //将to_Carrier_id改成已经选择过的
//                                    lotinfo.setString("TO_CARRIER_ID", wipmstsjdfntResult1.getValue("TO_CARRIER_ID", String.class));
//                                }
//                            }
                            if(wipmstsjdfntResult!=null
                                    && CommonUtil.isEmpty(wipmstsjdfntResult.getValue("TO_CARRIER_ID",String.class))
                                    && wipmstsjdfntResult.getValue("ACTION_CODE",String.class).equals("LOTTRANSFER"))
                            {
                                //传片类型的sorter job没有to carrier的时候需要add queue界面上选择
                                if(CommonUtil.isEmpty(lotinfo.getString("TO_CARRIER_ID"))){
                                    throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName(), "", "FABM-P0264", new String[]{
                                            "FACTORY", JSON.getFactory(inData),
                                            "LOT_ID", sLotId,
                                            "EQUIP_ID", inData.getString("EQUIP_ID")
                                    });
                                }else{
                                    wipmlottselt.addValue("TO_CARRIER_ID",lotinfo.getString("TO_CARRIER_ID"));
                                    wipmlottselt.addValue("TO_CARRIER_STATUS","SELECT");
                                    //TO_Carrier 更新至sorter表wipmstsjdfnt 不可被其他场景使用
                                    if(checkCarrierSlot(JSON.getFactory(inData), sLotId, lotinfo.getString("TO_CARRIER_ID")))
                                    {
                                        WIPMSTSJDFNT wipmstsjdfnt1 = new WIPMSTSJDFNT();
                                        wipmstsjdfnt1.addValue("FACTORY", JSON.getFactory(inData));
                                        wipmstsjdfnt1.addValue("SORTER_JOB_ID", lotinfo.getString("SORTER_JOB_ID"));
                                        wipmstsjdfnt1.addValue("SORTER_SUB_JOB_ID", sorter_sub_job_id);//Modified by zhangchao@2022-08-31 for Multi-Sorter_Job
                                        wipmstsjdfnt1.addValue("TO_CARRIER_ID", lotinfo.getString("TO_CARRIER_ID"));
                                        tableHelper.updateByKey(WIPMSTSJDFNT.class, wipmstsjdfnt1, "WIPM-P0004");
                                        SortToCarrierFlag = false;
                                    }
                                    else
                                    {
                                        throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName(), "", "WIPM-P3095", new String[]{
                                            "FACTORY", JSON.getFactory(inData),
                                            "LOT_ID", sLotId,
                                            "TO_CARRIER_ID", lotinfo.getString("TO_CARRIER_ID")
                                        });
                                    }
                                }
                            }
                            else if(wipmstsjdfntResult!=null
                                    && !CommonUtil.isEmpty(wipmstsjdfntResult.getValue("TO_CARRIER_ID",String.class))
                                    && wipmstsjdfntResult.getValue("ACTION_CODE",String.class).equals("LOTTRANSFER"))
                            {
                                wipmlottselt.addValue("TO_CARRIER_ID",wipmstsjdfntResult.getValue("TO_CARRIER_ID",String.class));
                            }
                            if(!isOfflineSorter){
                                JsonBean forRCPIn = new JsonBean();
                                JsonBean forRCPOut = new JsonBean();
                                forRCPIn.setString("LOT_ID", sLotId);
                                WipmCommonFunction.wipmGetLotRecipeID(this, forRCPIn, forRCPOut);
                                //#12257 add queue问题点处理
                                sRecipeID = forRCPOut.getString("RCP_ID");//Recipe

                                //Get PJ Id
                                String sPJId = new String();
                                QueryHelper pjIdqueryHelper = new QueryHelper(this);
                                pjIdqueryHelper.addParaValues("FACTORY", JSON.getFactory(inData));
                                pjIdqueryHelper.addParaValues("EQUIP_ID", inData.getString("EQUIP_ID"));
                                String sSql = "WIPM_M_S_WIPMLOTTMAST_ViewLotListBySelectLotEqp";
                                pjIdqueryHelper.setQueryId(sSql);
                                ArrayList<DbQuery> list = pjIdqueryHelper.query("COMM-P0004");
                                for (DbQuery item : list) {
                                    if (!item.getValue("LOT_ID", String.class).equals(sLotId))
                                        continue;
                                    sPJId = item.getValue("PROC_JOB_ID", String.class);
                                }
                                //已经pre select的lot校验设备必须一致
                                PRPTDATAMAST prptdatamast1 = new PRPTDATAMAST();
                                prptdatamast1.addValue("FACTORY", JSON.getFactory(inData));
                                prptdatamast1.addValue("PROPERTY_TYPE", GCDef.PROP_TYPE_LOT);
                                prptdatamast1.addValue("PROPERTY_NAME", "PRE_SELECT_EQUIP_ID");
                                prptdatamast1.addValue("PROPERTY_KEY", sLotId);
                                TableQueryParas tableQueryParas2 = new TableQueryParas();
                                tableQueryParas2.setForceSingleRow(true);
                                PRPTDATAMAST prptdatamast1Result = tableHelper.select(PRPTDATAMAST.class, prptdatamast1, tableQueryParas2, "", "ETCM-P0004");
                                if (prptdatamast1Result != null) {
                                    if (!CommonUtil.isEmpty(prptdatamast1Result.getValue("PROPERTY_VALUE", String.class)) &&
                                            !prptdatamast1Result.getValue("PROPERTY_VALUE", String.class).equals(inData.getString("EQUIP_ID"))
                                    ) {
                                        throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName(), "", "FABM-P0256", new String[]{
                                                "FACTORY", JSON.getFactory(inData),
                                                "LOT_ID", sLotId,
                                                "PRE_SELECT_EQUIP_ID", prptdatamast1Result.getValue("PROPERTY_VALUE", String.class),
                                                "EQUIP_ID", inData.getString("EQUIP_ID")
                                        });
                                    }
                                }
                                sLotID = sLotId;

                                wipmlottselt.addValue("LOT_ID", sLotId);
                                WIPMLOTTSELT wipmlottseltResult = tableHelper.selectByKey(WIPMLOTTSELT.class, wipmlottselt, "", "WIPM-P0004", "FABM-P0172");

//Modified by zhangchao@2022-08-31 for Multi-Sorter_Job --start
//                                WIPMLOTTMAST wipmlottmast = new WIPMLOTTMAST();
//                                wipmlottmast.addValue("LOT_ID", sLotId);
//                                WIPMLOTTMAST wipmlottmastResult = tableHelper.selectByKey(WIPMLOTTMAST.class, wipmlottmast, "WIPM-P0044", "WIPM-P0004");
//Modified by zhangchao@2022-08-31 for Multi-Sorter_Job --end

                                //Redmine #12345 在 add queue 和 RTD 中添加 add Scan/Rework 对机台的绑定逻辑
                                WIPMADSCMAST wipmadscmast = new WIPMADSCMAST();
                                wipmadscmast.addValue("LOT_ID", sLotId);
                                wipmadscmast = tableHelper.selectByKey(WIPMADSCMAST.class, wipmadscmast,"", "WIPM-P0004");
                                if(wipmadscmast != null){
                                    WIPMADSOMAST wipmadsomast = new WIPMADSOMAST();
                                    wipmadsomast.addValue("LOT_ID", sLotId);
                                    //wipmadsomast.addValue("EQUIP_ID", inData.getString("EQUIP_ID"));
                                    wipmadsomast.addValue("TO_OPER", wipmlottmastResult.getValue("OPER", String.class));
                                    TableQueryParas queryParas = new TableQueryParas();
                                    ArrayList<WIPMADSOMAST> wipmadsomasts = tableHelper.selectList(WIPMADSOMAST.class, wipmadsomast, queryParas, "WIPM-P0004");
                                    if(wipmadsomasts.size() == 0){
                                        throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName(), "", "FABM-P0254",
                                                "FACTORY", JSON.getFactory(inData),
                                                "LOT_ID", sLotId,
                                                "EQUIP_ID", inData.getString("EQUIP_ID"));
                                    }
                                    for (WIPMADSOMAST item : wipmadsomasts) {
                                        String scanEqp = item.getValue("EQUIP_ID", String.class);
                                        if(!scanEqp.equals(inData.getString("EQUIP_ID")) && !scanEqp.equals(" ")){
                                            throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName(), "", "FABM-P0254",
                                                    "FACTORY", JSON.getFactory(inData),
                                                    "LOT_ID", sLotId,
                                                    "EQUIP_ID", inData.getString("EQUIP_ID"));
                                        }
                                    }
                                }

                                if(!CommonUtil.isEmpty(sBatchID) && !sBatchID.equals(wipmlottmastResult.getValue("BATCH_ID",String.class))){
                                    throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName(), "", "WIPM-P0315", new String[]{
                                            "FACTORY", JSON.getFactory(inData),
                                            "LOT_ID", sLotId,
                                            "BATCH_ID", sBatchID,
                                            "LOT_BATCH_ID", wipmlottmastResult.getValue("BATCH_ID",String.class)
                                    });
                                }

                                //WetChange类型检查换Foup
                                if(prptdatamastResult != null && prptdatamastResult.getValue("PROPERTY_VALUE", String.class).equals("WETCHANGE")){
                                    if(CommonUtil.isEmpty(lotinfo.getString("TO_CARRIER_ID"))){
                                        //查找当前Oper设置的可用的Carrier Group&Carrier Type
                                        ArrayList<String> sGroupList = new ArrayList<String>();
                                        ArrayList<String> sTypeList = new ArrayList<String>();
                                        String sCrrGroup = new String();
                                        String sCrrType = new String();

                                        JsonBean inBean = new JsonBean();
                                        JsonBean outBean = new JsonBean();
                                        JSON.copyInParas(inData, inBean);
                                        JSON.setProcStep(inBean, '1');
                                        inBean.setString("PRODUCT_ID", wipmlottmastResult.getValue("PRODUCT_ID", String.class));
                                        inBean.setInt("PRODUCT_VER",wipmlottmastResult.getValue("PRODUCT_VER", int.class));
                                        inBean.setString("ROUTE", wipmlottmastResult.getValue("ROUTE", String.class));
                                        inBean.setInt("ROUTE_VER", wipmlottmastResult.getValue("ROUTE_VER", int.class));
                                        inBean.setString("OPER", wipmlottmastResult.getValue("OPER", String.class));
                                        for (int i = 1; i <= 20; i++) {
                                            inBean.setString("LOT_USC_" + i, wipmlottmastResult.getValue("LOT_USC_" + i,String.class));
                                        }
                                        AbstractMesService etcmViewCarrierProOption = ServiceMapper.getServiceObject("ETCM", "EtcmViewCarrierProOption");
                                        etcmViewCarrierProOption.innerCall(this, inBean, outBean);
                                        if(outBean.getList("TYPE_LIST").size()>0 || outBean.getList("GROUP_LIST").size()>0){
                                            throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName(), "", "FABM-P0264", new String[]{
                                                    "FACTORY", JSON.getFactory(inData),
                                                    "LOT_ID", sLotId,
                                                    "EQUIP_ID", inData.getString("EQUIP_ID")
                                            });
                                        }
                                    }else{
                                        //已设置Change Carrier，校验是否符合规则
                                        CommonLogic.checkCarrierRelation(this,inData,wipmlottmastResult,wipmlottmastResult.getValue("CARRIER_ID",String.class),
                                                lotinfo.getString("TO_CARRIER_ID"),'E');
                                        //Redmine #11398 Carrier Group Relation Setup 功能新建 在缺失to group的pod或者cst的情况下可以正常更换盒子 不产生报错 -> Common Function
                                        WipmCommonFunction.newCheckChangeCarrier(this,inData,wipmlottmastResult,wipmlottmastResult.getValue("CARRIER_ID",String.class),
                                                lotinfo.getString("TO_CARRIER_ID"),'M');
                                        //#12007 增加wet change foup使用校验
                                        ETCMCARRMAST etcmcarrmast = new ETCMCARRMAST();
                                        etcmcarrmast.addValue("CARRIER_ID", lotinfo.getString("TO_CARRIER_ID"));
                                        ETCMCARRMAST etcmcarrmastResult = tableHelper.selectByKey(ETCMCARRMAST.class, etcmcarrmast, "ETCM-P0057", "ETCM-P0004");
                                        if (!CommonUtil.isEmpty(etcmcarrmastResult.getValue("LOCATION_2", String.class))) {
                                            ETCMEQPTMAST etcmeqptmast = new ETCMEQPTMAST();
                                            etcmeqptmast.addValue("FACTORY", JSON.getFactory(inData));
                                            etcmeqptmast.addValue("EQUIP_ID", etcmcarrmastResult.getValue("LOCATION_2", String.class));
                                            ETCMEQPTMAST etcmeqptmastResult = tableHelper.selectByKey(ETCMEQPTMAST.class, etcmeqptmast, "", "ETCM-P0004");
                                            if (etcmeqptmastResult == null || !etcmeqptmastResult.getValue("EQUIP_GRP_3", String.class).equals("OHB")) {
                                                throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName(), "", "FABM-P0271", new String[]{
                                                        "FACTORY", JSON.getFactory(inData),
                                                        "CARRIER_ID", lotinfo.getString("TO_CARRIER_ID"),
                                                        "LOCATION", etcmcarrmastResult.getValue("LOCATION_2", String.class)
                                                });
                                            }
                                        }else {
                                            throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName(), "", "FABM-P0271", new String[]{
                                                    "FACTORY", JSON.getFactory(inData),
                                                    "CARRIER_ID", lotinfo.getString("TO_CARRIER_ID")
                                            });
                                        }
                                        if(etcmcarrmastResult.getValue("EMPTY_YN",char.class)!='Y'){
                                            throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName(), "", "ETCM-P0066", new String[]{
                                                    "FACTORY", JSON.getFactory(inData),
                                                    "CARRIER_ID", lotinfo.getString("TO_CARRIER_ID")
                                            });
                                        }
                                        WIPMSTSJDFNT wipmstsjdfnt1 = new WIPMSTSJDFNT();
                                        wipmstsjdfnt1.addValue("FACTORY",JSON.getFactory(inData));
                                        wipmstsjdfnt1.addValue("TO_CARRIER_ID",lotinfo.getString("TO_CARRIER_ID"));
                                        wipmstsjdfnt1.addValue("SUB_JOB_STATUS","CREATE");
                                        if (tableHelper.selectScalar(WIPMSTSJDFNT.class, wipmstsjdfnt1, "WIPM-P0004") > 0
                                        ) {
                                            throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName() + "", "", "WIPM-P0738",
                                                    "CARRIER_ID", lotinfo.getString("TO_CARRIER_ID")
                                            );
                                        }

                                        wipmlottselt.addValue("TO_CARRIER_ID",lotinfo.getString("TO_CARRIER_ID"));
                                        wipmlottselt.addValue("TO_CARRIER_STATUS","SELECT");
                                    }
                                }

                                int iCarrierCount = 0;
                                QueryHelper queryHelper = new QueryHelper(this);
                                queryHelper.addParaValues("FACTORY", JSON.getFactory(inData));
                                queryHelper.addParaValues("EQUIP_ID", inData.getString("EQUIP_ID"));
                                queryHelper.addParaValues("LOT_ID", sLotID);
                                queryHelper.addParaValues("TO_CARRIER_ID", lotinfo.getString("TO_CARRIER_ID"));
                                queryHelper.setQueryId("WIPM_M_S_WIPMLOTTSELT_GetCarrierCountByLotEqpID");
                                DbQuery dbItem_s = queryHelper.querySingle("", "WIPM-P0004");
                                if (dbItem_s != null) {
                                    iCarrierCount = dbItem_s.getValue("CNT", int.class);
                                }
                                if (iProcLotCount + iSaftyLotCount < iCarrierCount) {
                                    throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName() + ".doService", "", "FABM-P0220", new String[]{
                                            "FACTORY", JSON.getFactory(inData),
                                            "EQUIP_ID", inData.getString("EQUIP_ID"),
                                            "LOT_ID", sLotID,
                                            "PROC_LOT_COUNT", String.valueOf(iProcLotCount),
                                            "SAFTY_LOT_COUNT", String.valueOf(iSaftyLotCount),
                                            "CARRIER_COUNT", String.valueOf(iCarrierCount)
                                    }
                                    );
                                }

                                wipmlottselt.addValue("FACTORY", wipmlottmastResult.getValue("FACTORY", String.class));
                                wipmlottselt.addValue("EQUIP_ID", inData.getString("EQUIP_ID"));
                                wipmlottselt.addValue("EQUIP_GRP_ID", inData.getString("EQUIP_GRP_ID"));
                                if (inData.getChar("FROM_RTD") == 'Y') {
//                                    if (sLotId == lotinfo.getString("LOT_ID")) {
//                                        //When current LotId is Input LotId
//                                        wipmlottselt.addValue("SOURCE_TYPE", "RTD");
//                                        wipmlottselt.addValue("PORT_ID", sLotId);
//                                        sPortID = lotinfo.getString("PORT_ID");
//                                    } else {
//                                        //When current LotId isn's Input LotId
//                                        //Use Same Foup Lot Info  by Input ?
//                                    }
                                    //#12257 add queue问题点处理
                                    wipmlottselt.addValue("SOURCE_TYPE", "RTD");
                                    wipmlottselt.addValue("PORT_ID", lotinfo.getString("PORT_ID"));
                                    sPortID = lotinfo.getString("PORT_ID");
                                } else {
                                    wipmlottselt.addValue("SOURCE_TYPE", "MES");
                                    wipmlottselt.addValue("PORT_ID", inData.getString("PORT_ID"));
                                    sPortID = inData.getString("PORT_ID");//Multi-lot in one Foup should be same portId
                                }

                                wipmlottselt.addValue("CARRIER_ID", wipmlottmastResult.getValue("CARRIER_ID", String.class));

                                //Get Recipe ID
                                JsonBean RecipeinData = new JsonBean();
                                JsonBean RecipeoutData = new JsonBean();
                                RecipeinData.setString("LOT_ID", sLotId);
                                WipmCommonFunction.wipmGetLotRecipeID(this, RecipeinData, RecipeoutData);
                                //检查RTD传入的Recipe是否与MES一致
                                //#12257 add queue问题点处理
                                if (sLotId.equals(lotinfo.getString("LOT_ID"))) {
                                    //When current LotId is Input LotId
                                    if (inData.getChar("FROM_RTD") == 'Y' && !CommonUtil.isEmpty(lotinfo.getString("RECIPE_ID"))) {
                                        if (!RecipeoutData.getString("RCP_ID").equals(lotinfo.getString("RECIPE_ID"))) {
                                            throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName(), "", "FABM-P0181", new String[]{
                                                    "FACTORY", JSON.getFactory(inData),
                                                    "LOT_ID", inData.getString("LOT_ID"),
                                                    "RTD_RCP", lotinfo.getString("RECIPE_ID"),
                                                    "MES_RCP", RecipeoutData.getString("RCP_ID")
                                            });
                                        }
                                    } else if (lotinfo.getChar("CLIENT_RTD") == 'Y' && !CommonUtil.isEmpty(lotinfo.getString("RECIPE_ID"))) {
                                        if (!RecipeoutData.getString("RCP_ID").equals(lotinfo.getString("RECIPE_ID"))) {
                                            throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName(), "", "FABM-P0181", new String[]{
                                                    "FACTORY", JSON.getFactory(inData),
                                                    "LOT_ID", inData.getString("LOT_ID"),
                                                    "RTD_RCP", lotinfo.getString("RECIPE_ID"),
                                                    "MES_RCP", RecipeoutData.getString("RCP_ID")
                                            });
                                        }
                                    }
                                } else {
                                    //When current LotId isn't Input LotId
                                    //Use Same Foup Lot Info  by Input ?
                                }
                                wipmlottselt.addValue("RECIPE_ID",RecipeoutData.getString("RCP_ID"));
                                if(CommonUtil.isEmpty(sRecipeID)){
                                    sRecipeID=RecipeoutData.getString("RCP_ID");
                                }

                                //Redmine 12107 --start
                                Boolean needGetPJInfo = false;
                                sRTDPJ="N";
                                sProcessJobGroupID="";
                                sProcessJobID="";
                                String sRCPControlMode = CommonLogic.getGlobalOptionValue3(this, JSON.getFactory(inData), "MP_RecipeControlMode");

                                //#14415 RTD选错PJ的话MES挑选自己的PJ 保证Lot可以Add queue成功 start
                                Boolean RTDPJFalseOrTrue = true;
                                //#14415 RTD选错PJ的话MES挑选自己的PJ 保证Lot可以Add queue成功 end

                                //检查RTD传入的ProcessJob是否可用
                                inData.setString("LOT_ID",sLotId);
                                //call apc for etch
                                JsonBeanList unActiveList = new JsonBeanList();
                                PRPTDATAMAST integrate_apc_check = WipmCommonFunction.getPRPDataMastValueByLock(this, GCDef.PROP_TYPE_EQUIP, "INTEGRATE_APC_CHECKCHAMBER", inData.getString("EQUIP_ID"), new ArrayList<>(), false);
                                boolean check_chamber_flag = integrate_apc_check != null && "Y".equals(integrate_apc_check.getValue("PROPERTY_VALUE", String.class));
                                if (check_chamber_flag) {
                                    JsonBean etchApcIndata = new JsonBean();
                                    JsonBean etcnApcOutdata = new JsonBean();
                                    JSON.copyInParas(inData, etchApcIndata);
                                    JsonBeanList lot_list1 = new JsonBeanList();
                                    JsonBean lot_id1 = new JsonBean();
                                    lot_id1.setString("LOT_ID", sLotId);
                                    lot_list1.addJsonBean(lot_id1);
                                    etchApcIndata.setList("LOT_LIST", lot_list1);
                                    etchApcIndata.setString("EQUIP_ID", inData.getString("EQUIP_ID"));
                                    etchApcIndata.setString("_SERVICE", "M2AReserveLotInfo");

                                    String channel = CommonLogic.getGlobalOptionValue3(this, JSON.getFactory(inData), "MES_MESServer_Channel");
                                    etcnApcOutdata = this.callService("EISM", "M2AReserveLotInfo", channel, etchApcIndata, 60000, CallServiceMode.RequestReply);
                                    //                            AbstractMesService ams = ServiceMapper.getServiceObject("EISM", "M2AReserveLotInfo");
                                    //                            ams.innerCall(this, etchApcIndata, etcnApcOutdata);
                                    if (!CommonUtil.isEmpty(etcnApcOutdata.getString("MSG_ID"))) {
                                        throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName() + ".doService",
                                                etcnApcOutdata.getString("ERROR_MSG"), etcnApcOutdata.getString("MSG_ID"));
                                    }
                                    if (!"0".equals(etcnApcOutdata.getString("RETURNCODE"))) {
                                        throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName() + ".doService", "", "FABM-P0320",
                                                "FACTORY", JSON.getFactory(inData),
                                                "EQUIP_ID", inData.getString("EQUIP_ID"),
                                                "FAILED_LOTS", sLotId,
                                                "ERR_MSG", etcnApcOutdata.getString("RETURNMESSAGE"));
                                        //                                        continue;
                                    }
                                    JsonBeanList list1 = etcnApcOutdata.getJsonBean("Body").getList("LOT_LIST");
                                    if (list1.size() > 0) {
                                        String run_mode = list1.getJsonBean(0).getString("RUN_MODE");
                                        if ("N".equals(run_mode)) {
                                            throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName() + ".doService", "", "FABM-P0320",
                                                    "FACTORY", JSON.getFactory(inData),
                                                    "EQUIP_ID", inData.getString("EQUIP_ID"),
                                                    "FAILED_LOTS", sLotId,
                                                    "ERR_MSG", list1.getJsonBean(0).getString("RETURNMESSAGE"));
                                        }
                                        unActiveList = getPJBySubEquip(list1.getJsonBean(0).getList("SUB_EQP_LIST"));
                                    }
                                }

                                if(inData.getChar("FROM_RTD")=='Y' ) {

                                    if(sRCPControlMode.equals("2")||sRCPControlMode.equals("3")){
                                        if(!CommonUtil.isEmpty(lotinfo.getString("PROC_JOB_GROUP_ID")))
                                        {
                                            //#12170 判断RTD PJ逻辑修改
                                            if(sLotId.equals(lotinfo.getString("LOT_ID"))) {
                                                //When current LotId is Input LotId
                                                //13069 A2 check rtd pj时增加传入NO_THROW_EXCEPTION_FLAG标记
                                                inData.setChar("NO_THROW_EXCEPTION_FLAG",'Y');
                                                //Add by zhangchao@2023-01-13 for for RiskLot Add Q Skip Constraint --start
                                                JsonBean riskInData = new JsonBean();
                                                JsonBean riskOutData = new JsonBean();
                                                JSON.copyInParas(inData, riskInData);
                                                riskInData.setString("BATCH_ID", wipmlottmastResult.getValue("BATCH_ID",String.class));
                                                riskInData.setString("EQUIP_ID", inData.getString("EQUIP_ID"));
                                                riskInData.setString("LOT_ID", wipmlottmastResult.getValue("LOT_ID",String.class));
                                                WipmCommonFunction.WipmIsConstraintRiskLot(this, riskInData, riskOutData);
                                                if(riskInData.getBoolean("CANCEL_PROCESS_CONSTRAINT"))
                                                {
                                                    inData.setString("SKIP_CONSTRAINT", "Y");
                                                }
                                                //#15045 修复CheckPjByPjGroupID未传Recipe Bug修复 Start
                                                outData.setString("RCP_ID",RecipeoutData.getString("RCP_ID"));
                                                //#15045 修复CheckPjByPjGroupID未传Recipe Bug修复 end
                                                //Add by zhangchao@2023-01-13 for for RiskLot Add Q Skip Constraint --end
                                                bPJAvailable = sien.wipm.WipmCommonFunction.wipmCheckPJByPJGrpID(this, inData, outData, lotinfo.getString("PROC_JOB_GROUP_ID"), RecipeoutData.getString("RCP_ID"));
                                                if (bPJAvailable && check_chamber_flag){
                                                    bPJAvailable = checkPJApc(lotinfo.getString("PROC_JOB_GROUP_ID"), unActiveList, inData);
                                                }
                                                if (!bPJAvailable) {
                                                    //#14415 RTD选错PJ的话MES挑选自己的PJ 保证Lot可以Add queue成功 start
                                                    if ("Y".equals(RtdPJChange)){
                                                        RTDPJFalseOrTrue=false;
                                                        needGetPJInfo = true;
                                                    }else{
                                                        throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName(), "", "WIPM-P0662", new String[]{
                                                                "FACTORY", JSON.getFactory(inData),
                                                                "LOT_ID", sLotId,
                                                                "RTD_PROC_JOB_GROUP_ID", lotinfo.getString("PROC_JOB_GROUP_ID")
                                                        });
                                                    }
                                                    //#14415 RTD选错PJ的话MES挑选自己的PJ 保证Lot可以Add queue成功 end
                                                }
                                                ETCMEQPJDFNT_C etcmeqpjdfnt_c = new ETCMEQPJDFNT_C();
                                                etcmeqpjdfnt_c.addValue("FACTORY", JSON.getFactory(inData));
                                                etcmeqpjdfnt_c.addValue("EQUIP_ID", inData.getString("EQUIP_ID"));
                                                etcmeqpjdfnt_c.addValue("PJ_GROUP_ID", lotinfo.getString("PROC_JOB_GROUP_ID"));
                                                ETCMEQPJDFNT_C etcmeqpjdfnt_cResult = tableHelper.selectByKey(ETCMEQPJDFNT_C.class, etcmeqpjdfnt_c, "ETCM-P0342", "ETCM-P0004");
                                                //#14415 RTD选错PJ的话MES挑选自己的PJ 保证Lot可以Add queue成功 Start
                                                if (RTDPJFalseOrTrue){
                                                    sProcessJobGroupID = lotinfo.getString("PROC_JOB_GROUP_ID");
                                                    sProcessJobID = etcmeqpjdfnt_cResult.getValue("PROCESS_JOB", String.class);
                                                    //#12170 判断RTD PJ逻辑修改
                                                    sRTDPJ="Y";
                                                }
                                                //#14415 RTD选错PJ的话MES挑选自己的PJ 保证Lot可以Add queue成功 end
                                            } else {
                                                //When current LotId isn't Input LotId
                                                //Use Same Foup Lot Info  by Input ?
                                            }
                                        }
                                        else
                                        {//RTD call interface and PJInfo is Null
                                            needGetPJInfo = true;
                                        }
                                    }else{
                                        needGetPJInfo = true;
                                    }

                                }
                                else if(lotinfo.getChar("CLIENT_RTD")=='Y'){
                                    if(sRCPControlMode.equals("2")||sRCPControlMode.equals("3")){
                                        if(!CommonUtil.isEmpty(lotinfo.getString("PROC_JOB_GROUP_ID")))
                                        {
                                            //#12170 判断RTD PJ逻辑修改
                                            if(sLotId.equals(lotinfo.getString("LOT_ID"))) {
                                                //When current LotId is Input LotId
                                                //13069 A2 check rtd pj时增加传入NO_THROW_EXCEPTION_FLAG标记
                                                inData.setChar("NO_THROW_EXCEPTION_FLAG",'Y');
                                                //Add by zhangchao@2023-01-13 for for RiskLot Add Q Skip Constraint --start
                                                JsonBean riskInData = new JsonBean();
                                                JsonBean riskOutData = new JsonBean();
                                                JSON.copyInParas(inData, riskInData);
                                                riskInData.setString("BATCH_ID", wipmlottmastResult.getValue("BATCH_ID",String.class));
                                                riskInData.setString("EQUIP_ID", inData.getString("EQUIP_ID"));
                                                riskInData.setString("LOT_ID", wipmlottmastResult.getValue("LOT_ID",String.class));
                                                WipmCommonFunction.WipmIsConstraintRiskLot(this, riskInData, riskOutData);
                                                if(riskInData.getBoolean("CANCEL_PROCESS_CONSTRAINT"))
                                                {
                                                    inData.setString("SKIP_CONSTRAINT", "Y");
                                                }
                                                //#15045 修复CheckPjByPjGroupID未传Recipe Bug修复 Start
                                                outData.setString("RCP_ID",RecipeoutData.getString("RCP_ID"));
                                                //#15045 修复CheckPjByPjGroupID未传Recipe Bug修复 end
                                                //Add by zhangchao@2023-01-13 for for RiskLot Add Q Skip Constraint --end
                                                bPJAvailable = sien.wipm.WipmCommonFunction.wipmCheckPJByPJGrpID(this, inData, outData, lotinfo.getString("PROC_JOB_GROUP_ID"), RecipeoutData.getString("RCP_ID"));
                                                if (!bPJAvailable) {
                                                    //#14415 RTD选错PJ的话MES挑选自己的PJ 保证Lot可以Add queue成功 start
                                                    if ("Y".equals(RtdPJChange)){
                                                        RTDPJFalseOrTrue=false;
                                                        needGetPJInfo = true;

                                                    }else{
                                                        throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName(), "", "WIPM-P0662", new String[]{
                                                                "FACTORY", JSON.getFactory(inData),
                                                                "LOT_ID", sLotId,
                                                                "RTD_PROC_JOB_GROUP_ID", lotinfo.getString("PROC_JOB_GROUP_ID")
                                                        });
                                                    }
                                                    //#14415 RTD选错PJ的话MES挑选自己的PJ 保证Lot可以Add queue成功 end
                                                }
                                                ETCMEQPJDFNT_C etcmeqpjdfnt_c = new ETCMEQPJDFNT_C();
                                                etcmeqpjdfnt_c.addValue("FACTORY", JSON.getFactory(inData));
                                                etcmeqpjdfnt_c.addValue("EQUIP_ID", inData.getString("EQUIP_ID"));
                                                etcmeqpjdfnt_c.addValue("PJ_GROUP_ID", lotinfo.getString("PROC_JOB_GROUP_ID"));
                                                ETCMEQPJDFNT_C etcmeqpjdfnt_cResult = tableHelper.selectByKey(ETCMEQPJDFNT_C.class, etcmeqpjdfnt_c, "ETCM-P0342", "ETCM-P0004");
                                                //#14415 RTD选错PJ的话MES挑选自己的PJ 保证Lot可以Add queue成功 Start
                                                if (RTDPJFalseOrTrue){
                                                    sProcessJobGroupID = lotinfo.getString("PROC_JOB_GROUP_ID");
                                                    sProcessJobID = etcmeqpjdfnt_cResult.getValue("PROCESS_JOB", String.class);
                                                    //#12170 判断RTD PJ逻辑修改
                                                    sRTDPJ="Y";
                                                }
                                                //#14415 RTD选错PJ的话MES挑选自己的PJ 保证Lot可以Add queue成功 end
                                            } else {
                                                //When current LotId isn't Input LotId
                                                //Use Same Foup Lot Info  by Input ?
                                            }
                                        }
                                        else
                                        {//UI use RTD data call and PJInfo is Null
                                            needGetPJInfo = true;
                                        }
                                    }else{
                                        needGetPJInfo = true;
                                    }
                                }
                                else{
                                    //UI use MES data call Auto Get PJInfo
                                    needGetPJInfo = true;
                                }

                                if(needGetPJInfo)
                                {
                                    //Get Process Job ID
                                    JsonBean ProcJobinData = new JsonBean();
                                    JsonBean ProcJoboutData = new JsonBean();
                                    JSON.copyInParas(inData, ProcJobinData);
                                    ProcJobinData.setString("LOT_ID", sLotId);
                                    ProcJobinData.setString("EQUIP_ID", inData.getString("EQUIP_ID"));
                                    ProcJobinData.setChar("NO_THROW_EXCEPTION_FLAG",'Y');
                                    ProcJobinData.setList("UN_ACTIVE_LIST", unActiveList);
                                    ProcJobinData.setBoolean("CHECK_CHAMBER_FLAG", check_chamber_flag);
                                    sien.wipm.WipmCommonFunction.wipmCheckEquipProcessJob(this, ProcJobinData, ProcJoboutData, false);
                                    sProcessJobGroupID = ProcJoboutData.getString("PROC_JOB_GROUP_ID");
                                    sProcessJobID = ProcJoboutData.getString("PROC_JOB_ID");
                                }
                                //#14415 RTD选错PJ的话MES挑选自己的PJ 保证Lot可以Add queue成功 start
                                if (!RTDPJFalseOrTrue&&"Y".equals(RtdPJChange)){
                                    jsonRTDPJ.setString("PROC_JOB_GROUP_ID",lotinfo.getString("PROC_JOB_GROUP_ID"));
                                    jsonRTDPJ.setString("PROC_JOB_ID",lotinfo.getString("PROC_JOB_ID"));
                                    jsonMESPJ.setString("PROC_JOB_GROUP_ID",sProcessJobGroupID);
                                    jsonMESPJ.setString("PROC_JOB_ID",sProcessJobID);
                                }
                                //#14415 RTD选错PJ的话MES挑选自己的PJ 保证Lot可以Add queue成功 end
                                //Redmine 12107 --end

                                //----------------------------------------------------------------------------------------------------------------------
                                //Check Lot
                                //FABB #14588 AddQueue 与Auto Reserve 对 Lot 重复CheckLotService 的问题处理
                                if(CommonUtil.isEmpty(wipmlottmastResult.getValue("BATCH_ID", String.class))
                                        || !alreadyCheckLotBatchId.contains(wipmlottmastResult.getValue("BATCH_ID", String.class))){
                                    JsonBean lotCheck = new JsonBean();
                                    JSON.copyInParas(inData, lotCheck);
                                    JSON.setProcStep(lotCheck, '1');
                                    lotCheck.setString("LOT_ID", sameCarrierlots.get(indexOfSameCarrier).getValue("LOT_ID", String.class));
                                    //#11919 BS站点 lot add queue报错处理
                                    if(!CommonUtil.isEmpty(sBatchID) && (!sStepType.equals("BS") && !sStepType.equals("BR"))){
                                        lotCheck.setString("BATCH_ID", lotinfo.getString("BATCH_ID"));//Use Input Lot Info
                                    }
                                    lotCheck.setString("RCP_ID", sRecipeID);
                                    lotCheck.setString("CARRIER_ID", wipmlottmastResult.getValue("CARRIER_ID", String.class));
                                    lotCheck.setString("EQUIP_ID", inData.getString("EQUIP_ID"));
                                    lotCheck.setString("SUB_EQUIP_ID", inData.getString("SUB_EQUIP_ID"));
                                    if (inData.getChar("FROM_RTD") == 'Y') {
                                        lotCheck.setString("PORT_ID", lotinfo.getString("PORT_ID"));//Use Input Lot Info
                                    } else {
                                        lotCheck.setString("PORT_ID", inData.getString("PORT_ID"));
                                    }
                                    lotCheck.setChar("NO_THROW_EXCEPTION_FLAG", 'Y');
                                    lotCheck.setChar("NO_PORT_ID", 'Y');
                                    lotCheck.setChar("SORTER_FLAG",'Y');//Has Inline Sorter Job lot
                                    if(!bSorterFlag)
                                        lotCheck.setChar("SORTER_FLAG",'N');//Normal lot
                                    //FABB #13845 Dummy Exchange Add Queue的时候跳过 PRE_CHECK
                                    lotCheck.setString("SKIP_PRE_CHECK", inData.getString("SKIP_PRE_CHECK"));
                                    //需求：RTD选错PJ的话MES挑选自己的PJ 保证Lot可以Add queue成功(需要添加功能开关，以及留lot history 变更记录)
                                    lotCheck.setBoolean("IS_ADD_QUEUE",true);
                                    //需求：RTD选错PJ的话MES挑选自己的PJ 保证Lot可以Add queue成功(需要添加功能开关，以及留lot history 变更记录)

                                    WIPMOPERDFNT wipmoperdfnt = new WIPMOPERDFNT();
                                    wipmoperdfnt.addValue("FACTORY", JSON.getFactory(inData));
                                    wipmoperdfnt.addValue("OPER", wipmlottmastResult.getValue("OPER", String.class));
                                    WIPMOPERDFNT wipmoperdfntResult = tableHelper.selectByKey(WIPMOPERDFNT.class,
                                            wipmoperdfnt, "WIPM-P0010", "WIPM-P0004");
                                    if (wipmoperdfntResult != null) {
                                        lotCheck.setString("TOOL_USE_OPER", wipmoperdfntResult.getValue("OPER_GRP_1", String.class));
                                    }
                                    //Check the carrier status
                                    lotCheck.setString("CHECK_CARRIER","Y");
                                    if(!inData.getString("SKIP_CHECKLOTSERVICE").equals("Y")) {//Add by BoYan@2023-02-22 for MakeBatch Performance --start
                                        AbstractMesService scheck = ServiceMapper.getServiceObject("WIPM", "WipmCheckLotService");
                                        scheck.innerCall(this, lotCheck, outData);
                                    }
                                    alreadyCheckLotBatchId.add(wipmlottmastResult.getValue("BATCH_ID", String.class));
                                }
                            }
                            else {
                                //offline Sorter
                                sLotID = sLotId;
//Modified by zhangchao@2022-08-31 for Multi-Sorter_Job --start
//                                wipmlottselt.addValue("LOT_ID", sLotId);
//                                WIPMLOTTSELT wipmlottseltResult = tableHelper.selectByKey(WIPMLOTTSELT.class, wipmlottselt, "", "WIPM-P0004", "FABM-P0172");

//                                WIPMLOTTMAST wipmlottmast = new WIPMLOTTMAST();
//                                wipmlottmast.addValue("LOT_ID", sLotId);
//                                wipmlottmastResult = tableHelper.selectByKey(WIPMLOTTMAST.class, wipmlottmast, "WIPM-P0044", "WIPM-P0004");
//Modified by zhangchao@2022-08-31 for Multi-Sorter_Job --end
                                int iCarrierCount = 0;
                                QueryHelper queryHelper = new QueryHelper(this);
                                queryHelper.addParaValues("FACTORY", JSON.getFactory(inData));
                                queryHelper.addParaValues("EQUIP_ID", inData.getString("EQUIP_ID"));
                                queryHelper.addParaValues("LOT_ID", sLotID);
                                queryHelper.addParaValues("TO_CARRIER_ID", wipmlottselt.getValue("TO_CARRIER_ID",String.class));
                                queryHelper.setQueryId("WIPM_M_S_WIPMLOTTSELT_GetCarrierCountByLotEqpID");
                                DbQuery dbItem_s = queryHelper.querySingle("", "WIPM-P0004");
                                if (dbItem_s != null) {
                                    iCarrierCount = dbItem_s.getValue("CNT", int.class);
                                }
                                if (iProcLotCount + iSaftyLotCount < iCarrierCount) {
                                    throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName() + ".doService", "", "FABM-P0220", new String[]{
                                            "FACTORY", JSON.getFactory(inData),
                                            "EQUIP_ID", inData.getString("EQUIP_ID"),
                                            "LOT_ID", sLotID,
                                            "PROC_LOT_COUNT", String.valueOf(iProcLotCount),
                                            "SAFTY_LOT_COUNT", String.valueOf(iSaftyLotCount),
                                            "CARRIER_COUNT", String.valueOf(iCarrierCount)
                                    }
                                    );
                                }

                                wipmlottselt.addValue("FACTORY", wipmlottmastResult.getValue("FACTORY", String.class));
                                wipmlottselt.addValue("EQUIP_ID", inData.getString("EQUIP_ID"));
                                wipmlottselt.addValue("EQUIP_GRP_ID", inData.getString("EQUIP_GRP_ID"));
                                if (inData.getChar("FROM_RTD") == 'Y') {
//                                    if (sLotId == lotinfo.getString("LOT_ID")) {
//                                        //When current LotId is Input LotId
//                                        wipmlottselt.addValue("SOURCE_TYPE", "RTD");
//                                        wipmlottselt.addValue("PORT_ID", sLotId);
//                                        sPortID = lotinfo.getString("PORT_ID");
//                                    } else {
//                                        //When current LotId isn's Input LotId
//                                        //Use Same Foup Lot Info  by Input ?
//                                    }
                                    //#12257 add queue问题点处理
                                    wipmlottselt.addValue("SOURCE_TYPE", "RTD");
                                    wipmlottselt.addValue("PORT_ID", lotinfo.getString("PORT_ID"));
                                    sPortID = lotinfo.getString("PORT_ID");//Multi-lot in one Foup should be same portId
                                } else {
                                    wipmlottselt.addValue("SOURCE_TYPE", "MES");
                                    wipmlottselt.addValue("PORT_ID", inData.getString("PORT_ID"));
                                    sPortID = inData.getString("PORT_ID");//Multi-lot in one Foup should be same portId
                                }

                                wipmlottselt.addValue("CARRIER_ID", wipmlottmastResult.getValue("CARRIER_ID", String.class));

                            }

                            //#12170 判断RTD PJ逻辑修改
                            wipmlottselt.addValue("LOT_ID", sLotId);
                            wipmlottselt.addValue("SELECT_LOT_USC_2", sRTDPJ);
                            wipmlottselt.addValue("PROC_JOB_GROUP_ID", sProcessJobGroupID);
                            wipmlottselt.addValue("PROC_JOB_ID", sProcessJobID);
                            wipmlottselt.addValue("LOT_STATUS", "SELECT");

                            wipmlottselt.addValue("SEQ", iSeq);

                            wipmlottselt.addValue("GROUP_ID", inData.getString("GROUP_ID"));
                            wipmlottselt.addValue("SELECT_ID", inData.getString("SELECT_ID"));
                            wipmlottselt.addValue("ORDER_SEQ", 1);
                            // FABB #12928 Add Select Lot List 非主操作Lot 的Create User 修改为SYSTEM
                            if(isMainOperationLot){
                                wipmlottselt.addValue("CREATE_USER_ID", JSON.getUser(inData));
                            }else{
                                wipmlottselt.addValue("CREATE_USER_ID", "ADMIN");
                            }
                            wipmlottselt.addValue("CREATE_TIME", stranTime);
                            wipmlottselt.addValue("SORTER_JOB_ID", lotinfo.getString("SORTER_JOB_ID"));
                            wipmlottselt.addValue("SORTER_SUB_JOB_ID", sorter_sub_job_id);//Modified by zhangchao@2022-08-31 for Multi-Sorter_Job
                            if(!CommonUtil.isEmpty(wipmlottselt.getValue("TO_CARRIER_ID",String.class))){
                                wipmlottselt.addValue("TO_CARRIER_STATUS", "SELECT");
                            }
                            if(!Common.isEmpty(sorter_sub_job_id))
                            {
                                wipmstsjdfnt  = new WIPMSTSJDFNT();
                                wipmstsjdfnt.addValue("FACTORY", JSON.getFactory(inData));
                                wipmstsjdfnt.addValue("SORTER_JOB_ID",  lotinfo.getString("SORTER_JOB_ID"));
                                wipmstsjdfnt.addValue("SORTER_SUB_JOB_ID", sorter_sub_job_id);
                                wipmstsjdfntResult = tableHelper.selectByKey(WIPMSTSJDFNT.class, wipmstsjdfnt, "", "WIPM-P0004");

                                if (wipmstsjdfntResult != null && !CommonUtil.isEmpty(wipmstsjdfntResult.getValue("TO_CARRIER_ID",String.class)) && !SortToCarrierFlag){
                                    wipmlottselt.addValue("SELECT_LOT_USC_4", "Y");//Full auto added flag, and remove from queue, need clear sorterJob ToCarrierID
                                }
                            }

                            // FABB #14047 计算将待操作Lot 在Queue 中的Seq， 放与Season 后， 其他Lot 前
                            if("Y".equals(lotinfo.getString("IS_ABSOLUTE_PRIORITY"))){
                                wipmlottselt.addValue("SELECT_LOT_USC_6", lotinfo.getString("IS_ABSOLUTE_PRIORITY"));
                            }


                            PRPTDATAMAST integrate_apc = WipmCommonFunction.getPRPDataMastValueByLock(this, GCDef.PROP_TYPE_EQUIP, "INTEGRATE_APC", inData.getString("EQUIP_ID"), new ArrayList<>(), false);
                            String MP_CheckApc = getGlobalOptionValue3(this, JSON.getFactory(inData), "MP_CheckApc");
                            if (integrate_apc != null && "Y".equals(integrate_apc.getValue("PROPERTY_VALUE", String.class))) {
                                //判断lot是否为pilot    batch 不需要
//                                if (lotlist.size() == 1) {
                                if(CommonUtil.isEmpty(wipmlottmastResult.getValue("BATCH_ID", String.class))){
                                    boolean pilot_flag = getWhetherPiLot(sLotId, inData);
                                    if (!pilot_flag) {
                                        //判断当前flow是否已经开了pirun
                                        String layer = "";
                                        String rcp_id = wipmlottselt.getValue("RECIPE_ID", String.class);
                                        if (rcp_id.contains("@")) {
                                            int index = rcp_id.indexOf("/", rcp_id.indexOf("@"));
                                            if (index > -1 && index + 4 <= rcp_id.length()) {
                                                layer = rcp_id.substring(index + 1, index + 4);
                                            }
                                        }
                                        WIPMPRUNMAST_C wipmprunmast_c = new WIPMPRUNMAST_C();
                                        wipmprunmast_c.addValue("FACTORY", JSON.getFactory(inData));
                                        wipmprunmast_c.addValue("FINISH_GOOD_ID", wipmlottmastResult.getValue("FINISH_GOOD_ID", String.class));
                                        wipmprunmast_c.addValue("PRODUCT_ID", wipmlottmastResult.getValue("PRODUCT_ID", String.class));
                                        wipmprunmast_c.addValue("LAYER_ID", layer);
                                        wipmprunmast_c.addValue("EQUIP_ID", inData.getString("EQUIP_ID"));
                                        WIPMPRUNMAST_C wipmprunmast_c1 = tableHelper.selectByKeyForUpdate(WIPMPRUNMAST_C.class, wipmprunmast_c, "", "WIPM-P0004");
                                        if (wipmprunmast_c1 != null
                                                && "Y".equals(wipmprunmast_c1.getValue("ACTIVE_YN", String.class))) {
                                            //当前flow已经开了pirun
                                            throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName() + ".doService", "", "FABM-P0335", new String[]{
                                                    "FACTORY", JSON.getFactory(inData),
                                                    "LOT_ID", sLotID,
                                                    "FINISH_GOOD_ID", wipmlottmastResult.getValue("FINISH_GOOD_ID", String.class),
                                                    "PRODUCT_ID", wipmlottmastResult.getValue("PRODUCT_ID", String.class),
                                                    "LAYER_ID", layer,
                                                    "EQUIP_ID", inData.getString("EQUIP_ID")
                                            });
                                        }

                                        boolean call_apc_flag = false;
                                        //增加判断lot pt+layer是否符合apc control的配置
                                        if ("Y".equals(MP_CheckApc)){
                                            WIPMAPCFDFNT_C wipmapcfdfnt_c = new WIPMAPCFDFNT_C();
                                            wipmapcfdfnt_c.addValue("FACTORY", JSON.getFactory(inData));
                                            wipmapcfdfnt_c.addValue("FINISH_GOOD_ID", wipmlottmastResult.getValue("FINISH_GOOD_ID", String.class));
                                            wipmapcfdfnt_c.addValue("PRODUCT_ID", wipmlottmastResult.getValue("PRODUCT_ID", String.class));
                                            wipmapcfdfnt_c.addValue("LAYER_ID", layer);
                                            WIPMAPCFDFNT_C wipmapcfdfnt_c1 = tableHelper.selectByKey(WIPMAPCFDFNT_C.class, wipmapcfdfnt_c, "", "WIPM-P0004");
                                            if (wipmapcfdfnt_c1 != null){
                                                call_apc_flag = true;
                                            }
                                        }else{
                                            call_apc_flag = true;
                                        }

                                        if (call_apc_flag) {
                                            JsonBean toApcIndata = new JsonBean();
                                            JsonBean toApcOutdata = new JsonBean();
                                            JSON.copyInParas(inData, toApcIndata);
                                            JsonBeanList lot_list = new JsonBeanList();
                                            JsonBean lot_id = new JsonBean();
                                            lot_id.setString("LOT_ID", sLotId);
                                            lot_list.addJsonBean(lot_id);
                                            toApcIndata.setList("LOT_LIST", lot_list);
                                            toApcIndata.setString("EQUIP_ID", inData.getString("EQUIP_ID"));
                                            toApcIndata.setString("_SERVICE", "M2ALithoCheckLot");

                                            String channel = CommonLogic.getGlobalOptionValue3(this, JSON.getFactory(inData), "MES_MESServer_Channel");
                                            toApcOutdata = this.callService("EISM", "M2ALithoCheckLot", channel, toApcIndata, 60000, CallServiceMode.RequestReply);
                                            //                                        AbstractMesService ams = ServiceMapper.getServiceObject("EISM", "M2ALithoCheckLot");
                                            //                                        ams.innerCall(this, toApcIndata, toApcOutdata);
                                            if (!CommonUtil.isEmpty(toApcOutdata.getString("MSG_ID"))){
                                                throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName() + ".doService",
                                                        toApcOutdata.getString("ERROR_MSG"), toApcOutdata.getString("MSG_ID"));
                                            }
                                            JsonBeanList list = toApcOutdata.getJsonBean("Body").getList("LOT_LIST");
                                            boolean skip_flag = false;
                                            for (JsonBean jsonBean : list) {
                                                if (!"0".equals(toApcOutdata.getString("RETURNCODE")) && "N".equals(jsonBean.getString("IS_PIRUN"))) {
                                                    throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName() + ".doService", "", "FABM-P0320",
                                                            "FACTORY", JSON.getFactory(inData),
                                                            "EQUIP_ID", inData.getString("EQUIP_ID"),
                                                            "FAILED_LOTS", toApcOutdata.getString("FAILED_LOTS"),
                                                            "ERR_MSG", toApcOutdata.getString("RETURNMESSAGE"));
                                                    //                                        continue;
                                                }
                                                if ("Y".equals(jsonBean.getString("IS_PIRUN"))) {
                                                    PRPTDATAMAST pirun_flag = WipmCommonFunction.getPRPDataMastValueByLock(this, GCDef.PROP_TYPE_EQUIP, "PIRUN_FLAG", inData.getString("EQUIP_ID"), new ArrayList<>(), false);
                                                    if (pirun_flag != null && "Y".equals(pirun_flag.getValue("PROPERTY_VALUE", String.class))) {
                                                        /*if (addQueue_flag) {
                                                            throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName() + ".doService", "", "FABM-P0336",
                                                                    "FACTORY", JSON.getFactory(inData),
                                                                    "EQUIP_ID", inData.getString("EQUIP_ID"),
                                                                    "LOT_ID", jsonBean.getString("LOT_ID"));
                                                        }*/
                                                        //相同pt+layer只开一个，其余卡住，不同可以多开，add q与开pirun可以同时
                                                        String join = String.join(",", wipmlottmastResult.getValue("FINISH_GOOD_ID", String.class), wipmlottmastResult.getValue("PRODUCT_ID", String.class), layer);
                                                        if (!pirunLayer.contains(join)){
                                                            pirunLayer.add(join);
                                                            apcMap.put(jsonBean, wipmlottselt);
                                                        }else{
                                                            /*throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName() + ".doService", "", "FABM-P0337",
                                                                    "FACTORY", JSON.getFactory(inData),
                                                                    "EQUIP_ID", inData.getString("EQUIP_ID"),
                                                                    "LOT_ID", jsonBean.getString("LOT_ID"));*/
                                                            //记录日志
                                                            JsonBean SubinData = new JsonBean();
                                                            JsonBean SuboutData = new JsonBean();
                                                            JSON.copyInParas(inData, SubinData);
                                                            // FABB #12928 Add Select Lot List 非主操作Lot 的Create User 修改为SYSTEM
                                                            if(!isMainOperationLot){
                                                                JSON.setUser(SubinData, "ADMIN");
                                                            }
                                                            SubinData.setString("LOT_ID", sLotId);
                                                            SubinData.setString("CARRIER_ID", sCarrierID);//Add by zhangchao @2022-12-05 for View Exception Handle Hist CarrierID
                                                            SubinData.setString("EQUIP_ID", inData.getString("EQUIP_ID"));
                                                            SubinData.setString("PORT_ID", sPortID);
                                                            SubinData.setString("RECIPE_ID", sRecipeID);
                                                            SubinData.setString("PROCESS_JOB_GROUP_ID", sProcessJobGroupID);
                                                            SubinData.setString("DATA_TYPE", "ADD_QUEUE");
                                                            SubinData.setString("SOURCE_TYPE", sSourceType);
                                                            SubinData.setChar("RESULT_TYPE", 'F');
                                                            SubinData.setString("ERR_CODE_ID", "FABM-P0337");
                                                            sien.wipm.WipmCommonFunction.InsertAddQueueReserveHistory(this, SubinData, SuboutData);
                                                        }
                                                        skip_flag = true;
                                                    } else {
                                                        //apc返回Y，设备不允许 pirun，卡住
                                                        throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName() + ".doService", "", "FABM-P0339",
                                                                "FACTORY", JSON.getFactory(inData),
                                                                "EQUIP_ID", inData.getString("EQUIP_ID"),
                                                                "LOT_ID", jsonBean.getString("LOT_ID"));
                                                    }
                                                    //                                                    skip_flag = true;
                                                }
                                                //addQueue_flag = true;
                                            }
                                            if (skip_flag) continue;
                                        }
        //                                    addQueue_flag = true;
                                    }
                                }
                            }

                            tableHelper.insert(WIPMLOTTSELT.class, wipmlottselt, "WIPM-P0004");

                            WIPMSELTHIST wipmselthist = new WIPMSELTHIST();
                            wipmselthist.addValue("LOT_ID", wipmlottselt.getValue("LOT_ID", String.class));
                            wipmselthist.addValue("SELECT_ID", inData.getString("SELECT_ID"));
                            wipmselthist.addValue("FACTORY", wipmlottselt.getValue("FACTORY", String.class));
                            wipmselthist.addValue("EQUIP_GRP_ID", wipmlottselt.getValue("EQUIP_GRP_ID", String.class));
                            wipmselthist.addValue("EQUIP_ID", wipmlottselt.getValue("EQUIP_ID", String.class));
                            wipmselthist.addValue("PORT_ID", wipmlottselt.getValue("PORT_ID", String.class));
                            wipmselthist.addValue("SOURCE_TYPE", wipmlottselt.getValue("SOURCE_TYPE", String.class));
                            wipmselthist.addValue("CARRIER_ID", wipmlottselt.getValue("CARRIER_ID", String.class));
                            wipmselthist.addValue("RECIPE_ID", wipmlottselt.getValue("RECIPE_ID", String.class));
                            wipmselthist.addValue("PROC_JOB_ID", wipmlottselt.getValue("PROC_JOB_ID", String.class));
                            wipmselthist.addValue("SEQ", wipmlottselt.getValue("SEQ", int.class));
                            wipmselthist.addValue("GROUP_ID", wipmlottselt.getValue("GROUP_ID", String.class));
                            wipmselthist.addValue("GROUP_PARALLEL", wipmlottselt.getValue("GROUP_PARALLEL", char.class));
                            wipmselthist.addValue("GROUP_IN_SEQ", wipmlottselt.getValue("GROUP_IN_SEQ", int.class));
                            wipmselthist.addValue("GROUP_SEASON_LOT_FLAG", wipmlottselt.getValue("GROUP_SEASON_LOT_FLAG", char.class));
                            wipmselthist.addValue("GROUP_SEASON_JOB_GROUP_ID", wipmlottselt.getValue("GROUP_SEASON_JOB_GROUP_ID", String.class));
                            wipmselthist.addValue("GROUP_SEASON_JOB_SEQ", wipmlottselt.getValue("GROUP_SEASON_JOB_SEQ", int.class));
                            wipmselthist.addValue("GROUP_SEASON_JOB_ID", wipmlottselt.getValue("GROUP_SEASON_JOB_ID", String.class));
                            wipmselthist.addValue("GROUP_SEASON_JOB_ID", wipmlottselt.getValue("GROUP_SEASON_JOB_ID", String.class));
                            wipmselthist.addValue("FAIL_REASON_CODE", wipmlottselt.getValue("FAIL_REASON_CODE", String.class));
                            wipmselthist.addValue("TRX_CODE", "SELECT");
                            wipmselthist.addValue("HIST_SEQ", 1);
                            // FABB #12928 Add Select Lot List 非主操作Lot 的Create User 修改为SYSTEM
                            if(isMainOperationLot){
                                wipmselthist.addValue("TRX_USER", JSON.getUser(inData));
                            }else{
                                wipmselthist.addValue("TRX_USER", "ADMIN");
                            }
                            wipmselthist.addValue("TRX_TIME", ServiceUtil.getSysTime(this));
                            wipmselthist.addValue("TRX_USC_1", inData.getString("FROM_SOURCE"));
                            wipmselthist.addValue("TRX_USC_2", inData.getString("TRX_USC_2"));
                            wipmselthist.addValue("TRX_USC_3", inData.getString("TRX_USC_3"));
                            wipmselthist.addValue("TRX_USC_4", inData.getString("TRX_USC_4"));
                            wipmselthist.addValue("TRX_USC_5", inData.getString("TRX_USC_5"));
                            wipmselthist.addValue("TRX_USC_6", inData.getString("TRX_USC_6"));
                            wipmselthist.addValue("TRX_USC_7", inData.getString("TRX_USC_7"));
                            wipmselthist.addValue("TRX_USC_8", inData.getString("TRX_USC_8"));
                            wipmselthist.addValue("TRX_USC_9", inData.getString("TRX_USC_9"));
                            wipmselthist.addValue("TRX_USC_10", inData.getString("TRX_USC_10"));
                            wipmselthist.addValue("TRX_USC_11", inData.getString("TRX_USC_11"));
                            wipmselthist.addValue("TRX_USC_12", inData.getString("TRX_USC_12"));
                            wipmselthist.addValue("TRX_USC_13", inData.getString("TRX_USC_13"));
                            wipmselthist.addValue("TRX_USC_14", inData.getString("TRX_USC_14"));
                            wipmselthist.addValue("TRX_USC_15", inData.getString("TRX_USC_15"));
                            wipmselthist.addValue("TRX_USC_16", inData.getString("TRX_USC_16"));
                            wipmselthist.addValue("TRX_USC_17", inData.getString("TRX_USC_17"));
                            wipmselthist.addValue("TRX_USC_18", inData.getString("TRX_USC_18"));
                            wipmselthist.addValue("TRX_USC_19", inData.getString("TRX_USC_19"));
                            wipmselthist.addValue("TRX_USC_20", inData.getString("TRX_USC_20"));
                            wipmselthist.addValue("SORTER_JOB_ID", wipmlottselt.getValue("SORTER_JOB_ID", String.class));
                            wipmselthist.addValue("SORTER_SUB_JOB_ID", wipmlottselt.getValue("SORTER_SUB_JOB_ID", String.class));
                            wipmselthist.addValue("TO_CARRIER_ID", wipmlottselt.getValue("TO_CARRIER_ID", String.class));
                            wipmselthist.addValue("TO_CARRIER_STATUS", wipmlottselt.getValue("TO_CARRIER_STATUS", String.class));
                            tableHelper.insert(WIPMSELTHIST.class, wipmselthist, "WIPM-P0004");

                            //新增AddQueue Lot History
                            JsonBean adaptLotIn = new JsonBean();
                            JsonBean adaptLotOut = new JsonBean();
                            JSON.copyInParas(inData, adaptLotIn);
                            // FABB #12928 Add Select Lot List 非主操作Lot 的Create User 修改为SYSTEM
                            if(!isMainOperationLot){
                                JSON.setUser(adaptLotIn, "ADMIN/"+JSON.getUser(inData));
                            }
                            JSON.setProcStep(adaptLotIn, '1');
                            adaptLotIn.setString("LOT_ID", wipmlottselt.getValue("LOT_ID", String.class));
                            adaptLotIn.setChar("__SKIP_HOLD_CHECK", 'Y');
                            adaptLotIn.setChar("NO_CHECK_BATCH_FLAG", 'Y');
                            adaptLotIn.setChar("NO_CHECK_BATCH_PTRO_FLAG", 'Y');
                            adaptLotIn.setChar("ADD_HIS_FLAG", 'Y');
                            adaptLotIn.setString("ADAPT_TRX_CODE", "ADD_QUEUE");
                            adaptLotIn.setString("TRX_USC_1", inData.getString("EQUIP_ID"));
                            //#14415 RTD选错PJ的话MES挑选自己的PJ 保证Lot可以Add queue成功 start
                            if ("Y".equals(RtdPJChange)){
                                adaptLotIn.setString("TRX_USC_2", jsonRTDPJ.getString("PROC_JOB_ID"));
                                adaptLotIn.setString("TRX_USC_3", jsonMESPJ.getString("PROC_JOB_ID"));
                            }
                            //#14415 RTD选错PJ的话MES挑选自己的PJ 保证Lot可以Add queue成功 end
                            AbstractMesService wipmAdaptLotExtSvr = ServiceMapper.getServiceObject("WIPM", "WipmAdaptLotExt");
                            wipmAdaptLotExtSvr.innerCall(this, adaptLotIn, adaptLotOut);

                            //#13131 数据汇总增加字段
                            JsonBean updatein = new JsonBean();
                            JSON.copyInParas(inData, updatein);
                            JSON.setUser(updatein, JSON.getUser(inData));
                            updatein.setString("LOT_ID", wipmlottselt.getValue("LOT_ID", String.class));
                            sien.wipm.WipmUpdateSummaryLotData.UpdateSummaryLotByField(this,updatein,"ADD_QUEUE");

                            //AddQueue/Reserve Lot失败统计记录
                            JsonBean SubinData = new JsonBean();
                            JsonBean SuboutData = new JsonBean();
                            JSON.copyInParas(inData, SubinData);
                            // FABB #12928 Add Select Lot List 非主操作Lot 的Create User 修改为SYSTEM
                            if(!isMainOperationLot){
                                JSON.setUser(SubinData, "ADMIN");
                            }
                            SubinData.setString("LOT_ID", sLotID);
                            SubinData.setString("CARRIER_ID", sCarrierID);//Add by zhangchao @2022-12-05 for View Exception Handle Hist CarrierID
                            SubinData.setString("EQUIP_ID", inData.getString("EQUIP_ID"));
                            SubinData.setString("PORT_ID", sPortID);
                            SubinData.setString("RECIPE_ID", sRecipeID);
                            SubinData.setString("PROCESS_JOB_GROUP_ID", sProcessJobGroupID);
                            SubinData.setString("DATA_TYPE", "ADD_QUEUE");
                            SubinData.setString("SOURCE_TYPE", sSourceType);
                            SubinData.setChar("RESULT_TYPE", 'S');
                            sien.wipm.WipmCommonFunction.InsertAddQueueReserveHistory(this, SubinData, SuboutData);
                        }catch (ServiceException se){
                            //AddQueue/Reserve Lot失败统计记录
                            hasError = true;
                            JsonBean SubinData = new JsonBean();
                            JsonBean SuboutData = new JsonBean();
                            JSON.copyInParas(inData, SubinData);
                            // FABB #12928 Add Select Lot List 非主操作Lot 的Create User 修改为SYSTEM
                            if(!isMainOperationLot){
                                JSON.setUser(SubinData, "ADMIN");
                            }
                            SubinData.setString("LOT_ID", sLotId);
                            SubinData.setString("CARRIER_ID", sCarrierID);//Add by zhangchao @2022-12-05 for View Exception Handle Hist CarrierID
                            SubinData.setString("EQUIP_ID", inData.getString("EQUIP_ID"));
                            SubinData.setString("PORT_ID", sPortID);
                            SubinData.setString("RECIPE_ID", sRecipeID);
                            SubinData.setString("PROCESS_JOB_GROUP_ID", sProcessJobGroupID);
                            SubinData.setString("DATA_TYPE", "ADD_QUEUE");
                            SubinData.setString("SOURCE_TYPE", sSourceType);
                            SubinData.setChar("RESULT_TYPE", 'F');
                            SubinData.setString("ERR_CODE_ID", se.getMsgId().substring(0,10));
                            if(!isMainOperationLot) {
                                sien.wipm.WipmCommonFunction.InsertAddQueueReserveHistory(this, SubinData, SuboutData);
                            }
                            if(isMainOperationLot ||!CommonUtil.isEmpty(sBatchID)) {
                                throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName() + ".doService", "", se.getMsgId(), new String[]{
                                        "FACTORY", JSON.getFactory(inData),
                                        "EQUIP_ID", inData.getString("EQUIP_ID"),
                                        "LOT_ID", sLotId}
                                );
                            }
                        } catch  (Throwable e){
                            hasError = true;
                            ALogger.systemError("LOT_ID:" + sLotId + " PORT_ID:" + sPortID + " RECIPE_ID:" + sRecipeID + " PROCESS_JOB_GROUP_ID:" + sProcessJobGroupID + " Error:" + e.getMessage());
                        }

                        if(isMainOperationLot && hasError)
                        {//Main Operation target Lot fail
                            break;
                        }else{
                            if(!CommonUtil.isEmpty(sBatchID)){
                                break;
                            }else{
                                continue;
                            }
                        }
                    }
                }
                /*if (addQueue_flag && apcMap.size() > 0){
                    Iterator<Map.Entry<JsonBean, WIPMLOTTSELT>> iterator = apcMap.entrySet().iterator();
                    JsonBean SubinData = new JsonBean();
                    JsonBean SuboutData = new JsonBean();
                    JSON.copyInParas(inData, SubinData);
                    while(iterator.hasNext()){
                        Map.Entry<JsonBean, WIPMLOTTSELT> next = iterator.next();
                        JsonBean jsonBean = next.getKey();
                        //AddQueue/Reserve Lot失败统计记录
                        SubinData.setString("LOT_ID", jsonBean.getString("LOT_ID"));
                        SubinData.setString("CARRIER_ID", sCarrierID);//Add by zhangchao @2022-12-05 for View Exception Handle Hist CarrierID
                        SubinData.setString("EQUIP_ID", inData.getString("EQUIP_ID"));
                        SubinData.setString("PORT_ID", sPortID);
                        SubinData.setString("RECIPE_ID", sRecipeID);
                        SubinData.setString("PROCESS_JOB_GROUP_ID", sProcessJobGroupID);
                        SubinData.setString("DATA_TYPE", "ADD_QUEUE");
                        SubinData.setString("SOURCE_TYPE", sSourceType);
                        SubinData.setChar("RESULT_TYPE", 'F');
                        SubinData.setString("ERR_CODE_ID", "FABM-P0336");
                        sien.wipm.WipmCommonFunction.InsertAddQueueReserveHistory(this, SubinData, SuboutData);
                    }
                }else*/
                if (apcMap.size() > 0){
                    Iterator<Map.Entry<JsonBean, WIPMLOTTSELT>> iterator = apcMap.entrySet().iterator();
                    JsonBean SubinData = new JsonBean();
                    JsonBean SuboutData = new JsonBean();
                    JSON.copyInParas(inData, SubinData);

                    while(iterator.hasNext()){
                        Map.Entry<JsonBean, WIPMLOTTSELT> next = iterator.next();
                        JsonBean jsonBean = next.getKey();

                        WIPMLOTTSELT wipmlottselt = next.getValue();
                        JSON.copyInParas(inData, jsonBean);
                        JsonBean pirunOutData = new JsonBean();
                        try {
                            getPiRunInfo(inData, jsonBean);
                        } catch (ServiceException se) {
                            sLotID = jsonBean.getString("LOT_ID");
                            throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName() + ".doService", "", se.getMsgId(), new String[]{
                                    "FACTORY", JSON.getFactory(inData),
                                    "EQUIP_ID", inData.getString("EQUIP_ID"),
                                    "LOT_ID",sLotID}
                            );
                        }
                        AbstractMesService ams = ServiceMapper.getServiceObject("WIPM",  "WipmAutoGeneratePiLot");
                        ams.innerCall(this, jsonBean, pirunOutData);
                        //如果需要分批,则子批add queue
                        if(pirunOutData.getChar("AUTO_SPLIT_YN") == 'Y'){
                            //子批add queue，母批需要留存add queue fail的记录
                            SubinData.setString("_USERID", wipmlottselt.getValue("CREATE_USER_ID", String.class));
                            SubinData.setString("LOT_ID", wipmlottselt.getValue("LOT_ID", String.class));
                            SubinData.setString("CARRIER_ID", wipmlottselt.getValue("CARRIER_ID", String.class));//Add by zhangchao @2022-12-05 for View Exception Handle Hist CarrierID
                            SubinData.setString("EQUIP_ID", inData.getString("EQUIP_ID"));
                            SubinData.setString("PORT_ID", sPortID);
                            SubinData.setString("RECIPE_ID", sRecipeID);
                            SubinData.setString("PROCESS_JOB_GROUP_ID", sProcessJobGroupID);
                            SubinData.setString("DATA_TYPE", "ADD_QUEUE");
                            SubinData.setString("SOURCE_TYPE", sSourceType);
                            SubinData.setChar("RESULT_TYPE", 'F');
                            SubinData.setString("ERR_CODE_ID", "FABM-P0338");
                            sien.wipm.WipmCommonFunction.InsertAddQueueReserveHistory(this, SubinData, SuboutData);

                            wipmlottselt.addValue("LOT_ID", pirunOutData.getString("AUTO_SPLIT_LOT_ID"));
                        }
                        String sysTime = ServiceUtil.getSysTime(this);
                        //生成pilot，修改标记
                        WIPMPRUNMAST_C wipmprunmast_c = new WIPMPRUNMAST_C();
                        wipmprunmast_c.addValue("FACTORY", JSON.getFactory(inData));
                        wipmprunmast_c.addValue("FINISH_GOOD_ID", jsonBean.getString("PRODUCT_ID"));
                        wipmprunmast_c.addValue("PRODUCT_ID", jsonBean.getString("TECH"));
                        wipmprunmast_c.addValue("LAYER_ID", jsonBean.getString("LAYER"));
                        wipmprunmast_c.addValue("EQUIP_ID", inData.getString("EQUIP_ID"));
                        WIPMPRUNMAST_C wipmprunmast_c1 = tableHelper.selectByKey(WIPMPRUNMAST_C.class, wipmprunmast_c, "", "WIPM-P0004");

                        wipmprunmast_c.addValue("PI_LOT_NO", pirunOutData.getString("PI_LOT_NO"));
                        wipmprunmast_c.addValue("ACTIVE_YN", 'Y');
//                            wipmprunmast_c.addValue("LOT_ID", wipmlottselt.getValue("LOT_ID", String.class));
                        if (wipmprunmast_c1 == null){
                            //insert
                            wipmprunmast_c.addValue("CREATE_USER_ID", wipmlottselt.getValue("CREATE_USER_ID", String.class));
                            wipmprunmast_c.addValue("CREATE_TIME", sysTime);
                            tableHelper.insert(WIPMPRUNMAST_C.class, wipmprunmast_c, "WIPM-P0004");
                        }else{
                            //update
                            wipmprunmast_c.addValue("UPDATE_USER_ID", wipmlottselt.getValue("CREATE_USER_ID", String.class));
                            wipmprunmast_c.addValue("UPDATE_TIME", sysTime);
                            tableHelper.updateByKey(WIPMPRUNMAST_C.class, wipmprunmast_c, "WIPM-P0004");
                        }

                        //wafer信息保存
                        ArrayList<WIPMPRUNITEM_C> list = new ArrayList<>();
                        if(pirunOutData.getChar("AUTO_SPLIT_YN") == 'Y'){
                            //需要分批
                            JsonBeanList pilot_wafer_list = jsonBean.getList("PILOT_WAFER_LIST");
                            for (JsonBean bean : pilot_wafer_list) {
                                WIPMPRUNITEM_C wipmprunitem_c = new WIPMPRUNITEM_C();
                                wipmprunitem_c.addValue("FACTORY", JSON.getFactory(inData));
                                wipmprunitem_c.addValue("PI_LOT_NO", pirunOutData.getString("PI_LOT_NO"));
                                wipmprunitem_c.addValue("WAFER_ID", bean.getString("SUB_LOT_ID"));
                                wipmprunitem_c.addValue("ACTIVE_YN", 'Y');
                                wipmprunitem_c.addValue("CREATE_USER_ID", wipmlottselt.getValue("CREATE_USER_ID", String.class));
                                wipmprunitem_c.addValue("CREATE_TIME", sysTime);
                                list.add(wipmprunitem_c);
                            }
                        }else{
                            //不需要,全片
                            WIPMSLOTMAST wipmslotmast = new WIPMSLOTMAST();
                            wipmslotmast.addValue("LOT_ID", wipmlottselt.getValue("LOT_ID", String.class));
                            ArrayList<WIPMSLOTMAST> wipmslotmastList = tableHelper.selectList(WIPMSLOTMAST.class, wipmslotmast, new TableQueryParas(), "WIPM-P0004");
                            for (WIPMSLOTMAST wipmslotmast1 : wipmslotmastList) {
                                WIPMPRUNITEM_C wipmprunitem_c = new WIPMPRUNITEM_C();
                                wipmprunitem_c.addValue("FACTORY", JSON.getFactory(inData));
                                wipmprunitem_c.addValue("PI_LOT_NO", pirunOutData.getString("PI_LOT_NO"));
                                wipmprunitem_c.addValue("WAFER_ID", wipmslotmast1.getValue("SUB_LOT_ID", String.class));
                                wipmprunitem_c.addValue("ACTIVE_YN", 'Y');
                                wipmprunitem_c.addValue("CREATE_USER_ID", wipmlottselt.getValue("CREATE_USER_ID", String.class));
                                wipmprunitem_c.addValue("CREATE_TIME", sysTime);
                                list.add(wipmprunitem_c);
                            }
                        }
                        if (list.size() > 0){
                            tableHelper.batchInsert(WIPMPRUNITEM_C.class, list, "WIPM-P0004");
                        }

                        tableHelper.insert(WIPMLOTTSELT.class, wipmlottselt, "WIPM-P0004");

                        WIPMSELTHIST wipmselthist = new WIPMSELTHIST();
                        wipmselthist.addValue("LOT_ID", wipmlottselt.getValue("LOT_ID", String.class));
                        wipmselthist.addValue("SELECT_ID", inData.getString("SELECT_ID"));
                        wipmselthist.addValue("FACTORY", wipmlottselt.getValue("FACTORY", String.class));
                        wipmselthist.addValue("EQUIP_GRP_ID", wipmlottselt.getValue("EQUIP_GRP_ID", String.class));
                        wipmselthist.addValue("EQUIP_ID", wipmlottselt.getValue("EQUIP_ID", String.class));
                        wipmselthist.addValue("PORT_ID", wipmlottselt.getValue("PORT_ID", String.class));
                        wipmselthist.addValue("SOURCE_TYPE", wipmlottselt.getValue("SOURCE_TYPE", String.class));
                        wipmselthist.addValue("CARRIER_ID", wipmlottselt.getValue("CARRIER_ID", String.class));
                        wipmselthist.addValue("RECIPE_ID", wipmlottselt.getValue("RECIPE_ID", String.class));
                        wipmselthist.addValue("PROC_JOB_ID", wipmlottselt.getValue("PROC_JOB_ID", String.class));
                        wipmselthist.addValue("SEQ", wipmlottselt.getValue("SEQ", int.class));
                        wipmselthist.addValue("GROUP_ID", wipmlottselt.getValue("GROUP_ID", String.class));
                        wipmselthist.addValue("GROUP_PARALLEL", wipmlottselt.getValue("GROUP_PARALLEL", char.class));
                        wipmselthist.addValue("GROUP_IN_SEQ", wipmlottselt.getValue("GROUP_IN_SEQ", int.class));
                        wipmselthist.addValue("GROUP_SEASON_LOT_FLAG", wipmlottselt.getValue("GROUP_SEASON_LOT_FLAG", char.class));
                        wipmselthist.addValue("GROUP_SEASON_JOB_GROUP_ID", wipmlottselt.getValue("GROUP_SEASON_JOB_GROUP_ID", String.class));
                        wipmselthist.addValue("GROUP_SEASON_JOB_SEQ", wipmlottselt.getValue("GROUP_SEASON_JOB_SEQ", int.class));
                        wipmselthist.addValue("GROUP_SEASON_JOB_ID", wipmlottselt.getValue("GROUP_SEASON_JOB_ID", String.class));
                        wipmselthist.addValue("FAIL_REASON_CODE", wipmlottselt.getValue("FAIL_REASON_CODE", String.class));
                        wipmselthist.addValue("TRX_CODE", "SELECT");
                        wipmselthist.addValue("HIST_SEQ", 1);
                        // FABB #12928 Add Select Lot List 非主操作Lot 的Create User 修改为SYSTEM
                        wipmselthist.addValue("TRX_USER", wipmlottselt.getValue("CREATE_USER_ID", String.class));
                        wipmselthist.addValue("TRX_TIME", ServiceUtil.getSysTime(this));
                        wipmselthist.addValue("TRX_USC_1", inData.getString("FROM_SOURCE"));
                        wipmselthist.addValue("TRX_USC_2", inData.getString("TRX_USC_2"));
                        wipmselthist.addValue("TRX_USC_3", inData.getString("TRX_USC_3"));
                        wipmselthist.addValue("TRX_USC_4", inData.getString("TRX_USC_4"));
                        wipmselthist.addValue("TRX_USC_5", inData.getString("TRX_USC_5"));
                        wipmselthist.addValue("TRX_USC_6", inData.getString("TRX_USC_6"));
                        wipmselthist.addValue("TRX_USC_7", inData.getString("TRX_USC_7"));
                        wipmselthist.addValue("TRX_USC_8", inData.getString("TRX_USC_8"));
                        wipmselthist.addValue("TRX_USC_9", inData.getString("TRX_USC_9"));
                        wipmselthist.addValue("TRX_USC_10", inData.getString("TRX_USC_10"));
                        wipmselthist.addValue("TRX_USC_11", inData.getString("TRX_USC_11"));
                        wipmselthist.addValue("TRX_USC_12", inData.getString("TRX_USC_12"));
                        wipmselthist.addValue("TRX_USC_13", inData.getString("TRX_USC_13"));
                        wipmselthist.addValue("TRX_USC_14", inData.getString("TRX_USC_14"));
                        wipmselthist.addValue("TRX_USC_15", inData.getString("TRX_USC_15"));
                        wipmselthist.addValue("TRX_USC_16", inData.getString("TRX_USC_16"));
                        wipmselthist.addValue("TRX_USC_17", inData.getString("TRX_USC_17"));
                        wipmselthist.addValue("TRX_USC_18", inData.getString("TRX_USC_18"));
                        wipmselthist.addValue("TRX_USC_19", inData.getString("TRX_USC_19"));
                        wipmselthist.addValue("TRX_USC_20", inData.getString("TRX_USC_20"));
                        wipmselthist.addValue("SORTER_JOB_ID", wipmlottselt.getValue("SORTER_JOB_ID", String.class));
                        wipmselthist.addValue("SORTER_SUB_JOB_ID", wipmlottselt.getValue("SORTER_SUB_JOB_ID", String.class));
                        wipmselthist.addValue("TO_CARRIER_ID", wipmlottselt.getValue("TO_CARRIER_ID", String.class));
                        wipmselthist.addValue("TO_CARRIER_STATUS", wipmlottselt.getValue("TO_CARRIER_STATUS", String.class));
                        tableHelper.insert(WIPMSELTHIST.class, wipmselthist, "WIPM-P0004");

                        //新增AddQueue Lot History
                        JsonBean adaptLotIn = new JsonBean();
                        JsonBean adaptLotOut = new JsonBean();
                        JSON.copyInParas(inData, adaptLotIn);
                        // FABB #12928 Add Select Lot List 非主操作Lot 的Create User 修改为SYSTEM
                        adaptLotIn.setString("_USERID", wipmlottselt.getValue("CREATE_USER_ID", String.class));
                        JSON.setProcStep(adaptLotIn, '1');
                        adaptLotIn.setString("LOT_ID", wipmlottselt.getValue("LOT_ID", String.class));
                        adaptLotIn.setChar("__SKIP_HOLD_CHECK", 'Y');
                        adaptLotIn.setChar("NO_CHECK_BATCH_FLAG", 'Y');
                        adaptLotIn.setChar("NO_CHECK_BATCH_PTRO_FLAG", 'Y');
                        adaptLotIn.setChar("ADD_HIS_FLAG", 'Y');
                        adaptLotIn.setString("ADAPT_TRX_CODE", "ADD_QUEUE");
                        adaptLotIn.setString("TRX_USC_1", inData.getString("EQUIP_ID"));
                        AbstractMesService wipmAdaptLotExtSvr = ServiceMapper.getServiceObject("WIPM", "WipmAdaptLotExt");
                        wipmAdaptLotExtSvr.innerCall(this, adaptLotIn, adaptLotOut);

                        //#13131 数据汇总增加字段
                        JsonBean updatein = new JsonBean();
                        JSON.copyInParas(inData, updatein);
                        JSON.setUser(updatein, JSON.getUser(inData));
                        updatein.setString("LOT_ID", wipmlottselt.getValue("LOT_ID", String.class));
                        sien.wipm.WipmUpdateSummaryLotData.UpdateSummaryLotByField(this,updatein,"ADD_QUEUE");

                        //AddQueue/Reserve Lot失败统计记录
                        // FABB #12928 Add Select Lot List 非主操作Lot 的Create User 修改为SYSTEM
                        SubinData.setString("_USERID", wipmlottselt.getValue("CREATE_USER_ID", String.class));
                        SubinData.setString("LOT_ID", jsonBean.getString("LOT_ID"));
                        SubinData.setString("CARRIER_ID", sCarrierID);//Add by zhangchao @2022-12-05 for View Exception Handle Hist CarrierID
                        SubinData.setString("EQUIP_ID", inData.getString("EQUIP_ID"));
                        SubinData.setString("PORT_ID", sPortID);
                        SubinData.setString("RECIPE_ID", sRecipeID);
                        SubinData.setString("PROCESS_JOB_GROUP_ID", sProcessJobGroupID);
                        SubinData.setString("DATA_TYPE", "ADD_QUEUE");
                        SubinData.setString("SOURCE_TYPE", sSourceType);
                        SubinData.setChar("RESULT_TYPE", 'S');
                        sien.wipm.WipmCommonFunction.InsertAddQueueReserveHistory(this, SubinData, SuboutData);
                    }
                }
            }
            catch (ServiceException se){
                //AddQueue/Reserve Lot失败统计记录
                JsonBean SubinData = new JsonBean();
                JsonBean SuboutData = new JsonBean();
                JSON.copyInParas(inData, SubinData);
                SubinData.setString("LOT_ID", sLotID);
                SubinData.setString("CARRIER_ID", sCarrierID);//Add by zhangchao @2022-12-05 for View Exception Handle Hist CarrierID
                SubinData.setString("EQUIP_ID", inData.getString("EQUIP_ID"));
                SubinData.setString("PORT_ID", sPortID);
                SubinData.setString("RECIPE_ID", sRecipeID);
                SubinData.setString("PROCESS_JOB_GROUP_ID", sProcessJobGroupID);
                SubinData.setString("DATA_TYPE", "ADD_QUEUE");
                SubinData.setString("SOURCE_TYPE", sSourceType);
                SubinData.setChar("RESULT_TYPE", 'F');
                SubinData.setString("ERR_CODE_ID", se.getMsgId().substring(0,10));
                sien.wipm.WipmCommonFunction.InsertAddQueueReserveHistory(this, SubinData, SuboutData);

                throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName() + ".doService", "", se.getMsgId(), new String[]{
                        "FACTORY", JSON.getFactory(inData),
                        "EQUIP_ID", inData.getString("EQUIP_ID"),
                        "LOT_ID",sLotID}
                );
            }
            catch (Throwable e){
                ALogger.systemError("LOT_ID:" +sLotID+" PORT_ID:"+sPortID+" RECIPE_ID:"+sRecipeID+" PROCESS_JOB_GROUP_ID:"+sProcessJobGroupID+" Error:"+e.getMessage());
            }


            //Call A2SelectLot Service
//            JsonBean selectlot = new JsonBean();
//            JSON.copyInParas(inData, selectlot);
//            JSON.setProcStep(selectlot, '1');
//            selectlot.setString("EQUIP_ID", inData.getString("EQUIP_ID"));
//            AbstractMesService scheck = ServiceMapper.getServiceObject("WIPM", "WipmA2SelectLot");
//            scheck.innerCall(this, selectlot, outData);

        }
        else if(JSON.getProcStep(inData)=='2'){
            //Remove Select Lot
            //Modified by zhangchao@2022-09-06 --start
            if (!WipmCommonFunction.checkEquipSecurity(this, inData)) {
                SCRMPRIVUSER scrmprivuser;
                throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName(), "", "SCRM-P0019",
                        "FACTORY", JSON.getFactory(inData));
            }
            WipmCommonFunction.A2RemoveSelectLotFromQueue(this, inData, outData);

            //FABB #13597 ETCH Dummy Lot Remove Queue 后释放Empty Carrier
            String dumExcOption = CommonLogic.getGlobalOptionValue3(this, JSON.getFactory(inData), "MP_UseDummyExchange");
            if( "Y".equals(dumExcOption)) {
                WIPMLOTTMAST wipmlottmast = new WIPMLOTTMAST();
                wipmlottmast.addValue("FACTORY", JSON.getFactory(inData));
                wipmlottmast.addValue("LOT_ID", inData.getString("LOT_ID"));
                WIPMLOTTMAST wipmlottmastResult = tableHelper.selectByKey(WIPMLOTTMAST.class, wipmlottmast, "WIPM-P0044", "WIPM-P0004");
                String emptyCarrier = WipmCommonFunction.toDoEtchDummyExchange(this, inData, wipmlottmastResult);
                if( ! CommonUtil.isEmpty(emptyCarrier)){
                    WIPMLOTTSELT wipmlottselt = new WIPMLOTTSELT();
                    wipmlottselt.addValue("LOT_ID", inData.getString("EQUIP_ID") + emptyCarrier);
                    WIPMLOTTSELT wipmlottseltResult = tableHelper.selectByKey(WIPMLOTTSELT.class, wipmlottselt, "", "WIPM-P0004");

                    if(wipmlottseltResult != null){
                        tableHelper.deleteByKey(WIPMLOTTSELT.class, wipmlottselt,  "WIPM-P0004");

                        WIPMSELTHIST histSeqQuery = new WIPMSELTHIST();
                        histSeqQuery.addValue("LOT_ID", wipmlottseltResult.getValue("FACTORY", String.class));
                        histSeqQuery.addValue("SELECT_ID", wipmlottseltResult.getValue("SELECT_ID", String.class));
                        TableQueryParas paras = new TableQueryParas();
                        paras.addQueryField("NVL(MAX(HIST_SEQ),0) AS HIST_SEQ");
                        int histSeq = (int) tableHelper.selectScalar(WIPMSELTHIST.class, histSeqQuery, "WIPM-P0004");

                        //record Hist
                        WIPMSELTHIST wipmselthist = new WIPMSELTHIST();
                        wipmselthist.addValue("FACTORY", wipmlottseltResult.getValue("FACTORY", String.class));
                        wipmselthist.addValue("LOT_ID", wipmlottseltResult.getValue("LOT_ID", String.class));
                        //wipmselthist.addValue("LOT_STATUS", "SELECT");
                        wipmselthist.addValue("EQUIP_ID", wipmlottseltResult.getValue("EQUIP_ID", String.class));
                        wipmselthist.addValue("PORT_ID", wipmlottseltResult.getValue("PORT_ID", String.class));
                        wipmselthist.addValue("SOURCE_TYPE", wipmlottseltResult.getValue("SOURCE_TYPE", String.class));
                        wipmselthist.addValue("CARRIER_ID", wipmlottseltResult.getValue("CARRIER_ID", String.class));
                        wipmselthist.addValue("TRX_CODE", "REMOVE");
                        wipmselthist.addValue("SEQ", wipmlottseltResult.getValue("SEQ", int.class));
                        wipmselthist.addValue("HIST_SEQ", histSeq + 1);
                        wipmselthist.addValue("SELECT_ID", wipmlottseltResult.getValue("SELECT_ID", String.class));
                        wipmselthist.addValue("TRX_TIME", ServiceUtil.getSysTime(this));
                        wipmselthist.addValue("TRX_USER", JSON.getUser(inData));
                        tableHelper.insert(WIPMSELTHIST.class, wipmselthist, "WIPM-P0004");

                        WipmCommonFunction.carrierUnReserve(this, JSON.getFactory(inData), emptyCarrier);
                    }
                }
            }

//Modified by zhangchao@2022-09-06 --start

        }
        else if(JSON.getProcStep(inData)=='3') {
            //Adjust Select Lot List
            //机台权限校验
            if (!WipmCommonFunction.checkEquipSecurity(this, inData)) {
                throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName(), "", "SCRM-P0019",
                        "FACTORY", JSON.getFactory(inData));
            }

            //比对原始数据与数据库信息是否一致，如果不一致则返回报错
            JsonBeanList slotlist= inData.getList("S_LOT_LIST");
            JsonBeanList tlotlist= inData.getList("T_LOT_LIST");
            WIPMLOTTSELT wipmlottselt = new WIPMLOTTSELT();
            wipmlottselt.addValue("FACTORY",JSON.getFactory(inData));
            wipmlottselt.addValue("EQUIP_ID",inData.getString("EQUIP_ID"));
            wipmlottselt.addValue("LOT_STATUS","SELECT");
            wipmlottselt.addValue("GROUP_COMPLETE"," ");
            TableQueryParas tableQueryParas = new TableQueryParas();
            tableQueryParas.addOrderField("SEQ", QueryOrder.QueryOrderType.ASC);
            tableQueryParas.addOrderField("GROUP_IN_SEQ", QueryOrder.QueryOrderType.ASC);
            tableQueryParas.addOrderField("LOT_ID", QueryOrder.QueryOrderType.ASC);
            List<WIPMLOTTSELT> wipmlottseltlist = tableHelper.selectList(WIPMLOTTSELT.class,wipmlottselt,tableQueryParas,"WIPM-P0004");
            if(wipmlottseltlist.size()!=slotlist.size()){
                throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName(), "", "FABM-P0173", new String[]{
                        "FACTORY", JSON.getFactory(inData), "EQUIP_ID", inData.getString("EQUIP_ID"),
                        "COUNT",String.valueOf(slotlist.size()),"DB_COUNT",String.valueOf(wipmlottseltlist.size())
                });
            }
            int i=0;
            for (JsonBean lotinfo : slotlist) {
                if (lotinfo.getInt("SEQ") != wipmlottseltlist.get(i).getValue("SEQ", int.class) ||
                        !lotinfo.getString("LOT_ID").equals(wipmlottseltlist.get(i).getValue("LOT_ID", String.class)) ||
                        !lotinfo.getString("GROUP_ID").equals(wipmlottseltlist.get(i).getValue("GROUP_ID", String.class))
                ){
                    throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName(), "", "FABM-P0173", new String[]{
                            "FACTORY", JSON.getFactory(inData), "EQUIP_ID", inData.getString("EQUIP_ID"),
                            "LOT_ID",lotinfo.getString("LOT_ID"),
                            "DB_LOT_ID",wipmlottseltlist.get(i).getValue("LOT_ID", String.class),
                            "GROUP_ID",lotinfo.getString("GROUP_ID"),
                            "DB_GROUP_ID",wipmlottseltlist.get(i).getValue("GROUP_ID", String.class),
                            "SEQ",String.valueOf(lotinfo.getInt("SEQ")),
                            "DB_SEQ",String.valueOf(wipmlottseltlist.get(i).getValue("SEQ", int.class)
                    )
                    });
                }
                i++;
            }
            String sGroupID = new String();
            //获取待排序lot list的可用的最小SEQ值
            WIPMLOTTSELT wipmlottselt3 = new WIPMLOTTSELT();
            wipmlottselt3.addValue("FACTORY",JSON.getFactory(inData));
            wipmlottselt3.addValue("EQUIP_ID",inData.getString("EQUIP_ID"));
            wipmlottselt3.addValue("LOT_STATUS","SELECT");
            wipmlottselt3.addValue("GROUP_COMPLETE","Y");
            tableQueryParas = new TableQueryParas();
            tableQueryParas.setScalarFieldCond("NVL(MAX(SEQ),0) AS SEQ");
            int iSeq = (int) tableHelper.selectScalar(WIPMLOTTSELT.class, wipmlottselt3, tableQueryParas, "WIPM-P0004");
            iSeq=iSeq+1;
            //更新SELECT LOT LIST Sequence顺序
            for (JsonBean lotinfo : tlotlist) {
                if(CommonUtil.isEmpty(sGroupID)){
                    sGroupID=lotinfo.getString("GROUP_ID");
                }
                if(!sGroupID.equals(lotinfo.getString("GROUP_ID"))){
                    sGroupID=lotinfo.getString("GROUP_ID");
                    iSeq=iSeq+1;
                }
                WIPMLOTTSELT wipmlottselt1 = new WIPMLOTTSELT();
                wipmlottselt1.addValue("LOT_ID",lotinfo.getString("LOT_ID"));
                WIPMLOTTSELT wipmlottsel1tResult = tableHelper.selectByKey(WIPMLOTTSELT.class,wipmlottselt1,"FABM-P0170","WIPM-P0004");
                if(iSeq != wipmlottsel1tResult.getValue("SEQ", int.class)){
                    WIPMLOTTSELT wipmlottselt2 = new WIPMLOTTSELT();
                    wipmlottselt2.addValue("LOT_ID",lotinfo.getString("LOT_ID"));
                    wipmlottselt2.addValue("SEQ",iSeq);
                    tableHelper.updateByKey(WIPMLOTTSELT.class,wipmlottselt2,"WIPM-P0004");
                    //Add by zhangchao@2022-12-15 hist_seq 过大问题 --start
                    WIPMSELTHIST wipmselthist2 = new WIPMSELTHIST();
                    wipmselthist2.addValue("LOT_ID", wipmlottsel1tResult.getValue("LOT_ID", String.class));
                    wipmselthist2.addValue("SELECT_ID", wipmlottsel1tResult.getValue("SELECT_ID", String.class));
                    int iHistSeq = (int)tableHelper.selectScalar(WIPMSELTHIST.class, wipmselthist2, "WIPM-P0004");
                    //Add by zhangchao@2022-12-15 hist_seq 过大问题 --end
                    WIPMSELTHIST wipmselthist = new WIPMSELTHIST();
                    wipmselthist.addValue("LOT_ID", lotinfo.getString("LOT_ID"));
                    wipmselthist.addValue("SELECT_ID", wipmlottsel1tResult.getValue("SELECT_ID",String.class));
                    wipmselthist.addValue("FACTORY", wipmlottselt.getValue("FACTORY", String.class));
                    wipmselthist.addValue("EQUIP_GRP_ID", wipmlottselt.getValue("EQUIP_GRP_ID", String.class));
                    wipmselthist.addValue("EQUIP_ID", wipmlottselt.getValue("EQUIP_ID", String.class));
                    wipmselthist.addValue("PORT_ID", wipmlottselt.getValue("PORT_ID", String.class));
                    wipmselthist.addValue("SOURCE_TYPE", wipmlottsel1tResult.getValue("SOURCE_TYPE", String.class));
                    wipmselthist.addValue("CARRIER_ID", wipmlottsel1tResult.getValue("CARRIER_ID", String.class));
                    wipmselthist.addValue("RECIPE_ID", wipmlottsel1tResult.getValue("RECIPE_ID", String.class));
                    wipmselthist.addValue("PROC_JOB_ID", wipmlottselt.getValue("PROC_JOB_ID", String.class));
                    wipmselthist.addValue("SEQ", iSeq);
                    wipmselthist.addValue("GROUP_ID", lotinfo.getString("GROUP_ID"));
                    wipmselthist.addValue("GROUP_PARALLEL", wipmlottselt.getValue("GROUP_PARALLEL", char.class));
                    wipmselthist.addValue("GROUP_IN_SEQ", wipmlottselt.getValue("GROUP_IN_SEQ", int.class));
                    wipmselthist.addValue("GROUP_SEASON_LOT_FLAG", wipmlottselt.getValue("GROUP_SEASON_LOT_FLAG", char.class));
                    wipmselthist.addValue("GROUP_SEASON_JOB_GROUP_ID", wipmlottselt.getValue("GROUP_SEASON_JOB_GROUP_ID", String.class));
                    wipmselthist.addValue("GROUP_SEASON_JOB_SEQ", wipmlottselt.getValue("GROUP_SEASON_JOB_SEQ", int.class));
                    wipmselthist.addValue("GROUP_SEASON_JOB_ID", wipmlottselt.getValue("GROUP_SEASON_JOB_ID", String.class));
                    wipmselthist.addValue("FAIL_REASON_CODE", wipmlottselt.getValue("FAIL_REASON_CODE", String.class));
                    wipmselthist.addValue("TRX_CODE", "ADJUST");
                    wipmselthist.addValue("HIST_SEQ", iHistSeq+1);
                    wipmselthist.addValue("TRX_USER", JSON.getUser(inData));
                    wipmselthist.addValue("TRX_TIME", ServiceUtil.getSysTime(this));
                    wipmselthist.addValue("TRX_USC_1", inData.getString("TRX_USC_1"));
                    wipmselthist.addValue("TRX_USC_2", inData.getString("TRX_USC_2"));
                    wipmselthist.addValue("TRX_USC_3", inData.getString("TRX_USC_3"));
                    wipmselthist.addValue("TRX_USC_4", inData.getString("TRX_USC_4"));
                    wipmselthist.addValue("TRX_USC_5", inData.getString("TRX_USC_5"));
                    wipmselthist.addValue("TRX_USC_6", inData.getString("TRX_USC_6"));
                    wipmselthist.addValue("TRX_USC_7", inData.getString("TRX_USC_7"));
                    wipmselthist.addValue("TRX_USC_8", inData.getString("TRX_USC_8"));
                    wipmselthist.addValue("TRX_USC_9", inData.getString("TRX_USC_9"));
                    wipmselthist.addValue("TRX_USC_10", inData.getString("TRX_USC_10"));
                    wipmselthist.addValue("TRX_USC_11", inData.getString("TRX_USC_11"));
                    wipmselthist.addValue("TRX_USC_12", inData.getString("TRX_USC_12"));
                    wipmselthist.addValue("TRX_USC_13", inData.getString("TRX_USC_13"));
                    wipmselthist.addValue("TRX_USC_14", inData.getString("TRX_USC_14"));
                    wipmselthist.addValue("TRX_USC_15", inData.getString("TRX_USC_15"));
                    wipmselthist.addValue("TRX_USC_16", inData.getString("TRX_USC_16"));
                    wipmselthist.addValue("TRX_USC_17", inData.getString("TRX_USC_17"));
                    wipmselthist.addValue("TRX_USC_18", inData.getString("TRX_USC_18"));
                    wipmselthist.addValue("TRX_USC_19", inData.getString("TRX_USC_19"));
                    wipmselthist.addValue("TRX_USC_20", inData.getString("TRX_USC_20"));
                    wipmselthist.addValue("SORTER_JOB_ID", wipmlottselt.getValue("SORTER_JOB_ID", String.class));
                    wipmselthist.addValue("SORTER_SUB_JOB_ID", wipmlottselt.getValue("SORTER_SUB_JOB_ID", String.class));
                    wipmselthist.addValue("TO_CARRIER_ID", wipmlottselt.getValue("TO_CARRIER_ID", String.class));
                    wipmselthist.addValue("TO_CARRIER_STATUS", wipmlottselt.getValue("TO_CARRIER_STATUS", String.class));
                    tableHelper.insert(WIPMSELTHIST.class, wipmselthist, "WIPM-P0004");

                    JsonBean adaptLotIn = new JsonBean();
                    JsonBean adaptLotOut = new JsonBean();
                    JSON.copyInParas(inData, adaptLotIn);
                    JSON.setProcStep(adaptLotIn, '1');
                    adaptLotIn.setString("LOT_ID", lotinfo.getString("LOT_ID"));
                    adaptLotIn.setChar("__SKIP_HOLD_CHECK", 'Y');
                    adaptLotIn.setChar("NO_CHECK_BATCH_FLAG", 'Y');
                    adaptLotIn.setChar("NO_CHECK_BATCH_PTRO_FLAG", 'Y');
                    adaptLotIn.setChar("ADD_HIS_FLAG", 'Y');
                    adaptLotIn.setString("ADAPT_TRX_CODE", "ADJUST_QUEUE");
                    AbstractMesService wipmAdaptLotExtSvr = ServiceMapper.getServiceObject("WIPM", "WipmAdaptLotExt");
                    wipmAdaptLotExtSvr.innerCall(this, adaptLotIn, adaptLotOut);
                }

            }
        }
        else if(JSON.getProcStep(inData)=='4') {//Cancel Transfer Carrier Lot and delete from queue
            WIPMLOTTSELT wipmlottselt = new WIPMLOTTSELT();
            wipmlottselt.addValue("LOT_ID",inData.getString("LOT_ID"));
            WIPMLOTTSELT wipmlottseltResult = tableHelper.selectByKey(WIPMLOTTSELT.class,wipmlottselt,"FABM-P0170","WIPM-P0004");
            if(wipmlottseltResult.getValue("LOT_STATUS",String.class).equals("TRANSFER")
            ){
                WIPMLOTTSELT wipmlottselt1 = new WIPMLOTTSELT();
                wipmlottselt1.addValue("CARRIER_ID", wipmlottseltResult.getValue("CARRIER_ID", String.class));
                ArrayList<WIPMLOTTSELT> wipmlottselt1List = tableHelper.selectList(WIPMLOTTSELT.class, wipmlottselt1, new TableQueryParas(), "WIPM-P0004");
                for (WIPMLOTTSELT item : wipmlottselt1List) {
                    WIPMLOTTMAST wipmlottmast = new WIPMLOTTMAST();
                    wipmlottmast.addValue("LOT_ID", item.getValue("LOT_ID", String.class));
                    WIPMLOTTMAST wipmlottmastResult = tableHelper.selectByKey(WIPMLOTTMAST.class, wipmlottmast, "WIPM-P0044", "WIPM-P0004");
                    if (wipmlottmastResult.getValue("LOT_STATUS", String.class).equals("RESV")) {
                        throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName(), "", "FABM-P0267", new String[]{
                                "FACTORY", JSON.getFactory(inData),
                                "LOT_ID", item.getValue("LOT_ID", String.class)
                        });
                    }
                }

                String sCallTCSSvc = getGlobalOptionValue3(this, JSON.getFactory(inData), "MP_CallTCSSvc");
                TCSMTRQUSTAT tcsmtrqustat = new TCSMTRQUSTAT();
                tcsmtrqustat.addValue("CARRIER_ID", wipmlottseltResult.getValue("CARRIER_ID", String.class));
                tcsmtrqustat.addValue("COMPLETE_FLAG", ' ');
                int iCnt = (int) tableHelper.selectScalar(TCSMTRQUSTAT.class, tcsmtrqustat, "TCSM-P0004");
                if (iCnt > 0) {
                    if (sCallTCSSvc.equals("Y")) {
                        //-----------------------------------------------------------------------------------------------------------
                        //调用TCS服务发送取消搬送请求
                        JsonBean lotTransfer = new JsonBean();
                        JSON.copyInParas(inData, lotTransfer);
                        JSON.setProcStep(lotTransfer, '1');
                        lotTransfer.setString("CarrierId", wipmlottseltResult.getValue("CARRIER_ID", String.class));
                        lotTransfer.setInt("TransferPriority", 50);

                        AbstractMesService sTransfer = ServiceMapper.getServiceObject("TCSM", "TCSMT2MCancelTransferReq");
                        sTransfer.innerCall(this, lotTransfer, outData);
                        //-----------------------------------------------------------------------------------------------------------
                    }
                    //取消预约port
                    ETCMPORTMAST etcmportmast = new ETCMPORTMAST();
                    etcmportmast.addValue("FACTORY", JSON.getFactory(inData));
                    etcmportmast.addValue("EQUIP_ID", wipmlottseltResult.getValue("EQUIP_ID", String.class));
                    etcmportmast.addValue("CARRIER_ID", wipmlottseltResult.getValue("CARRIER_ID", String.class));
                    etcmportmast.addValue("RESV_STATUS", 'R');
                    ArrayList<ETCMPORTMAST> etcmportmastList = tableHelper.selectList(ETCMPORTMAST.class, etcmportmast, new TableQueryParas(), "ETCM-P0004");
                    for (ETCMPORTMAST port : etcmportmastList) {
                        JsonBean portIn = new JsonBean();
                        JSON.copyInParas(inData, portIn);
                        JSON.setProcStep(portIn, '1');
                        portIn.setString("EQUIP_ID", wipmlottseltResult.getValue("EQUIP_ID", String.class));
                        EtcmCommonFunction.UnReservePort(this, portIn, outData, port.getValue("PORT_ID", String.class));
                    }
                }else{
                    //如果Carrier仍在OHB上，取消预约port
                    ETCMCARRMAST etcmcarrmast = new ETCMCARRMAST();
                    etcmcarrmast.addValue("CARRIER_ID", wipmlottseltResult.getValue("CARRIER_ID",String.class));
                    ETCMCARRMAST etcmcarrmastResult = tableHelper.selectByKey(ETCMCARRMAST.class, etcmcarrmast, "ETCM-P0057", "ETCM-P0004");
                    if(!CommonUtil.isEmpty(etcmcarrmastResult.getValue("LOCATION_2",String.class))){
                        ETCMEQPTMAST etcmeqptmast = new ETCMEQPTMAST();
                        etcmeqptmast.addValue("FACTORY", JSON.getFactory(inData));
                        etcmeqptmast.addValue("EQUIP_ID", etcmcarrmastResult.getValue("LOCATION_2",String.class));
                        ETCMEQPTMAST etcmeqptmastResult = tableHelper.selectByKey(ETCMEQPTMAST.class, etcmeqptmast, "ETCM-P0003", "ETCM-P0004");
                        if(etcmeqptmastResult.getValue("EQUIP_GRP_3",String.class).equals("STOCKER") ||
                                etcmeqptmastResult.getValue("EQUIP_GRP_3",String.class).equals("OHB")||
                                etcmeqptmastResult.getValue("EQUIP_GRP_3",String.class).equals("MANUAL_STATION")
                        ){
                            ETCMPORTMAST etcmportmast = new ETCMPORTMAST();
                            etcmportmast.addValue("FACTORY", JSON.getFactory(inData));
                            etcmportmast.addValue("EQUIP_ID", wipmlottseltResult.getValue("EQUIP_ID", String.class));
                            etcmportmast.addValue("CARRIER_ID", wipmlottseltResult.getValue("CARRIER_ID", String.class));
                            etcmportmast.addValue("RESV_STATUS", 'R');
                            ArrayList<ETCMPORTMAST> etcmportmastList = tableHelper.selectList(ETCMPORTMAST.class, etcmportmast, new TableQueryParas(), "ETCM-P0004");
                            for (ETCMPORTMAST port : etcmportmastList) {
                                JsonBean portIn = new JsonBean();
                                JSON.copyInParas(inData, portIn);
                                JSON.setProcStep(portIn, '1');
                                portIn.setString("EQUIP_ID", wipmlottseltResult.getValue("EQUIP_ID", String.class));
                                EtcmCommonFunction.UnReservePort(this, portIn, outData, port.getValue("PORT_ID", String.class));
                            }
                        }
                    }
                }

                if (wipmlottseltResult.getValue("TO_CARRIER_STATUS", String.class).equals("TRANSFER")) {
                    tcsmtrqustat = new TCSMTRQUSTAT();
                    tcsmtrqustat.addValue("CARRIER_ID", wipmlottseltResult.getValue("TO_CARRIER_ID", String.class));
                    tcsmtrqustat.addValue("COMPLETE_FLAG", ' ');
                    iCnt = (int) tableHelper.selectScalar(TCSMTRQUSTAT.class, tcsmtrqustat, "TCSM-P0004");
                    if (iCnt > 0) {
                        if (sCallTCSSvc.equals("Y")) {
                            //-----------------------------------------------------------------------------------------------------------
                            //调用TCS服务发送取消搬送请求
                            JsonBean lotTransfer = new JsonBean();
                            JSON.copyInParas(inData, lotTransfer);
                            JSON.setProcStep(lotTransfer, '1');
                            lotTransfer.setString("CarrierId", wipmlottseltResult.getValue("TO_CARRIER_ID", String.class));
                            lotTransfer.setInt("TransferPriority", 50);

                            AbstractMesService sTransfer = ServiceMapper.getServiceObject("TCSM", "TCSMT2MCancelTransferReq");
                            sTransfer.innerCall(this, lotTransfer, outData);
                            //-----------------------------------------------------------------------------------------------------------
                        }
                        //取消预约port
                        ETCMPORTMAST etcmportmast = new ETCMPORTMAST();
                        etcmportmast.addValue("FACTORY", JSON.getFactory(inData));
                        etcmportmast.addValue("EQUIP_ID", wipmlottseltResult.getValue("EQUIP_ID", String.class));
                        etcmportmast.addValue("CARRIER_ID", wipmlottseltResult.getValue("TO_CARRIER_ID", String.class));
                        etcmportmast.addValue("RESV_STATUS", 'R');
                        ArrayList<ETCMPORTMAST> etcmportmastList = tableHelper.selectList(ETCMPORTMAST.class, etcmportmast, new TableQueryParas(), "ETCM-P0004");
                        for (ETCMPORTMAST port : etcmportmastList) {
                            JsonBean portIn = new JsonBean();
                            JSON.copyInParas(inData, portIn);
                            JSON.setProcStep(portIn, '1');
                            portIn.setString("EQUIP_ID", wipmlottseltResult.getValue("EQUIP_ID", String.class));
                            EtcmCommonFunction.UnReservePort(this, portIn, outData, port.getValue("PORT_ID", String.class));
                        }
                    }
                }

                //删除Queue表中同Carrier的数据
                WIPMLOTTSELT wipmlottselt2 = new WIPMLOTTSELT();
                wipmlottselt2.addValue("CARRIER_ID",wipmlottseltResult.getValue("CARRIER_ID", String.class));
                tableHelper.delete(WIPMLOTTSELT.class,wipmlottselt2,"WIPM-P0004");
            }else{
                throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName(), "", "FABM-P0266", new String[]{
                        "FACTORY", JSON.getFactory(inData),
                        "LOT_ID", inData.getString("LOT_ID")
                });
            }
        }
    }

    private boolean checkPJApc(String proc_job_group_id, JsonBeanList unActiveList, JsonBean inData) throws ServiceException {
        ETCMEQPJDFNT_C etcmeqpjdfnt_c = new ETCMEQPJDFNT_C();
        etcmeqpjdfnt_c.addValue("FACTORY", JSON.getFactory(inData));
        etcmeqpjdfnt_c.addValue("EQUIP_ID", inData.getString("EQUIP_ID"));
        etcmeqpjdfnt_c.addValue("PJ_GROUP_ID", proc_job_group_id);
        etcmeqpjdfnt_c = tableHelper.selectByKey(ETCMEQPJDFNT_C.class, etcmeqpjdfnt_c, "ETCM-P0342", "WIPM-P0004");
        String process_job = etcmeqpjdfnt_c.getValue("PROCESS_JOB", String.class);
        for (JsonBean jsonBean : unActiveList) {
            if (process_job.indexOf(jsonBean.getChar("SUB_EQUIP_ID")) > 0){
                return false;
            }
        }
        return true;
    }

    @Override
    public void isValid(JsonBean inData, JsonBean outData) throws ServiceException {
        ServiceUtil.svcValidation(this, inData, outData, "1234");
        if(JSON.getProcStep(inData)=='1'){
            ServiceUtil.isEmpty(this, inData, outData, "EQUIP_ID", "WIPM-P0001");
        }else if(JSON.getProcStep(inData)=='2'){
            ServiceUtil.isEmpty(this, inData, outData, "LOT_ID", "WIPM-P0001");
        }
    }

    //pirun信息
    private void getPiRunInfo(JsonBean inData, JsonBean apcData) throws ServiceException {
        WIPMAPCFDFNT_C wipmapcfdfnt_c = new WIPMAPCFDFNT_C();
        wipmapcfdfnt_c.addValue("FACTORY", JSON.getFactory(inData));
        wipmapcfdfnt_c.addValue("FINISH_GOOD_ID", apcData.getString("PRODUCT_ID"));
        wipmapcfdfnt_c.addValue("PRODUCT_ID", apcData.getString("TECH"));
        wipmapcfdfnt_c.addValue("LAYER_ID", apcData.getString("LAYER"));
        WIPMAPCFDFNT_C wipmapcfdfnt_cResult = tableHelper.selectByKey(WIPMAPCFDFNT_C.class, wipmapcfdfnt_c, "", "WIPM-P0004");
        if (wipmapcfdfnt_cResult != null){
            apcData.setString("END_STEP", wipmapcfdfnt_cResult.getValue("END_STEP", String.class));
            /**
             * 根据lot当前flow查询 step seq，lot当站同stage，向后找第一个end_step
             */
            WIPMLOTTMAST wipmlottmast = new WIPMLOTTMAST();
            wipmlottmast.addValue("LOT_ID", apcData.getString("LOT_ID"));
            wipmlottmast = tableHelper.selectByKey(WIPMLOTTMAST.class, wipmlottmast, "WIPM-P0044", "WIPM-P0004");
            QueryHelper queryHelper = new QueryHelper(this);
            queryHelper.setQueryId("WIPM_S_S_WIPMPTROSQID_C_ViewEendStepSeq");
            queryHelper.addParaValues("FACTORY", JSON.getFactory(inData));
            queryHelper.addParaValues("PRODUCT_ID", wipmlottmast.getValue("PRODUCT_ID", String.class));
            queryHelper.addParaValues("PRODUCT_VER", wipmlottmast.getValue("PRODUCT_VER", String.class));
            queryHelper.addParaValues("END_OPER", wipmapcfdfnt_cResult.getValue("END_STEP", String.class));
            queryHelper.addParaValues("ROUTE", wipmlottmast.getValue("ROUTE", String.class));
            queryHelper.addParaValues("ROUTE_VER", wipmlottmast.getValue("ROUTE_VER", String.class));
            queryHelper.addParaValues("OPER", wipmlottmast.getValue("OPER", String.class));
            ArrayList<DbQuery> query = queryHelper.query("WIPM-P00044");
            if (query.size() == 0){
                throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName() + ".doService", "", "WIPM-P3210",
                        "FACTORY", JSON.getFactory(inData),
                        "PRODUCT", apcData.getString("PRODUCT_ID"),
                        "TECH", apcData.getString("TECH"),
                        "LAYER", apcData.getString("LAYER"));
            }else{
                apcData.setString("END_SEQ_ID", query.get(0).getValue("SEQ_ID"));
            }
            apcData.setChar("AUTO_RWK", 'N');
        }else{
            throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName() + ".doService", "", "WIPM-P3163",
                    "FACTORY", JSON.getFactory(inData),
                    "PRODUCT", apcData.getString("PRODUCT_ID"),
                    "TECH", apcData.getString("TECH"),
                    "LAYER", apcData.getString("LAYER"));
        }
        //站点信息 目前只有当站
//        JsonBeanList operInfoList = new JsonBeanList();
//        JsonBean operInfo = new JsonBean();
        WIPMLOTTMAST wipmlottmast = new WIPMLOTTMAST();
        wipmlottmast.addValue("LOT_ID", apcData.getString("LOT_ID"));
        WIPMLOTTMAST wipmlottmast1 = tableHelper.selectByKey(WIPMLOTTMAST.class, wipmlottmast, "WIPM-P0044", "WIPM-P0004");
//        operInfo.setString("OPER", wipmlottmast1.getValue("OPER", String.class));
//        operInfo.setString("EQUIP_ID", inData.getString("EQUIP_ID"));
//        operInfo.setString("PPID", "");
//        operInfo.setString("SAMPLING_FLAG", "");
//        operInfoList.addJsonBean(operInfo);
//        apcData.setList("OPER_LIST", operInfoList);
        //equip group
        apcData.setString("EQUIP_ID", inData.getString("EQUIP_ID"));
        WIPMOPERDFNT wipmoperdfnt = new WIPMOPERDFNT();
        wipmoperdfnt.addValue("FACTORY", JSON.getFactory(inData));
        wipmoperdfnt.addValue("OPER", wipmlottmast1.getValue("OPER", String.class));
        WIPMOPERDFNT wipmoperdfnt1 = tableHelper.selectByKey(WIPMOPERDFNT.class, wipmoperdfnt, "WIPM-P0010", "WIPM-P0004");
        apcData.setString("EQUIP_GRP_ID", wipmoperdfnt1.getValue("EQUIP_GRP_ID", String.class));
        JSON.setUser(apcData, "SDR");
        //split hold code/merge hold code
        apcData.setString("START_HOLD_CODE", "PIRUN_WAIT_MERGE");
        apcData.setString("END_HOLD_CODE", "PIRUN_WAIT_MERGE");
        apcData.setString("START_HOLD_COMMENTS", "处于pi - lot模式");
        apcData.setString("END_HOLD_COMMENTS", "Auto Hold By Litho Auto Pirun");

        WIPMFHGDDFNT wipmfhgddfnt = new WIPMFHGDDFNT();
        wipmfhgddfnt.addValue("FACTORY", JSON.getFactory(inData));
        wipmfhgddfnt.addValue("FINISH_GOOD_ID", wipmlottmast1.getValue("FINISH_GOOD_ID", String.class));
        wipmfhgddfnt.addValue("FINISH_GOOD_VER", wipmlottmast1.getValue("FINISH_GOOD_VER", String.class));
        WIPMFHGDDFNT wipmfhgddfnt1 = tableHelper.selectByKey(WIPMFHGDDFNT.class, wipmfhgddfnt, "WIPM-P0589", "WIPM-P0004");
        MCTMDATAMAST mctmdatamast = new MCTMDATAMAST();
        mctmdatamast.addValue("FACTORY", JSON.getFactory(inData));
        mctmdatamast.addValue("TABLE_NAME", "APC_HOLD_DEPART");
        mctmdatamast.addValue("KEY_1", "PRODUCT");
        mctmdatamast.addValue("KEY_2", "LITHO");
        mctmdatamast.addValue("KEY_3", wipmfhgddfnt1.getValue("FINISH_GOOD_USC_20", String.class));
        for (int i = 4; i < 11; i++) {
            mctmdatamast.addValue("KEY_"+i, " ");
        }
        MCTMDATAMAST mctmdatamast1 = tableHelper.selectByKey(MCTMDATAMAST.class, mctmdatamast, "WIPM-P3166", "WIPM-P0004");
        apcData.setString("START_HOLD_PRIV_GRP_ID", mctmdatamast1.getValue("DATA_1", String.class));
        apcData.setString("END_HOLD_PRIV_GRP_ID", mctmdatamast1.getValue("DATA_1", String.class));
    }


    private boolean getWhetherPiLot(String sLotId, JsonBean inData) throws ServiceException {
        boolean piLot_Flag = false;
        PRPTDATAMAST prptdatamast = new PRPTDATAMAST();
        prptdatamast.addValue("FACTORY", JSON.getFactory(inData));
        prptdatamast.addValue("PROPERTY_TYPE", GCDef.PROP_TYPE_LOT);
        prptdatamast.addValue("PROPERTY_NAME", "PI_LOT");
        prptdatamast.addValue("PROPERTY_KEY", sLotId);
        TableQueryParas tableQueryParas = new TableQueryParas();
        tableQueryParas.setForceSingleRow(true);
        PRPTDATAMAST prptdatamastResult = tableHelper.select(PRPTDATAMAST.class, prptdatamast, tableQueryParas, "", "ETCM-P0004");
        if (prptdatamastResult != null && !CommonUtil.isEmpty(prptdatamastResult.getValue("PROPERTY_VALUE", String.class))){
            WIPMPILTDFNT_C wipmpiltdfnt_C = new WIPMPILTDFNT_C();
            wipmpiltdfnt_C.addValue("FACTORY", JSON.getFactory(inData));
            wipmpiltdfnt_C.addValue("PI_REQUEST_NO", prptdatamastResult.getValue("PROPERTY_VALUE", String.class));
            WIPMPILTDFNT_C wipmpiltdfnt_cResult = tableHelper.selectByKey(WIPMPILTDFNT_C.class, wipmpiltdfnt_C, "", "WIPM-P0004");
            if (wipmpiltdfnt_cResult != null){
                if (!sLotId.equals(wipmpiltdfnt_cResult.getValue("LOT_ID", String.class))){
                    //
                    piLot_Flag = true;
                }else{
                    if ('Y' == wipmpiltdfnt_cResult.getValue("MLOT_PI_RUN", char.class)){
                        piLot_Flag = true;
                    }
                }
            }
        }
        return piLot_Flag;
    }

//Add by zhangchao@2022-12-28 for inline sorter --start
    public List<String> getCurrentLotSorterJobContainsLotList(String factory, String sorterJobId, String sorterSubJobId) throws ServiceException
    {
        ArrayList<String> rstList = new ArrayList<String>();
        if(Common.isEmpty(sorterJobId))
        {
            return rstList;
        }
        QueryHelper qry = new QueryHelper(this);
        qry.setQueryId("WIPM_S_M_WIPMSTSJITEM_SorterJobLotList");
        qry.addParaValues("FACTORY", factory);
        qry.addParaValues("SORTER_JOB_ID", sorterJobId);
        qry.addParaValues("SORTER_SUB_JOB_ID", sorterSubJobId);
        try {
            ArrayList<DbQuery> lotList = qry.query("COMM-P0004");
            for ( DbQuery item: lotList) {
                if(!Common.isEmpty(item.getValue("FROM_LOT_ID", String.class)))
                {
                    rstList.add(item.getValue("FROM_LOT_ID", String.class));
                }
            }
        }
        catch (Exception e)
        {

        }
        return rstList;
    }

    public String getLotListHasNoSorterJob(String factory, List<WIPMLOTTMAST> fromLotList) throws ServiceException
    {
        String lotList = "";
        for (WIPMLOTTMAST item : fromLotList)
        {
            if(!Common.isEmpty(item.getValue("LOT_ID", String.class)))
            {
                QueryHelper queryHelper = new QueryHelper(this);
                queryHelper.addParaValues("FACTORY",    factory);
                queryHelper.addParaValues("LOT",        item.getValue("LOT_ID", String.class));
                try {
                    queryHelper.setQueryId("WIPM_S_M_WIPMSTSJITEM_notInSorterJobLotList");
                    int Cnt = (int)queryHelper.QueryScalar("CNT", "WIPM-P0004");
                    if(Cnt < 1)
                    {
                        if (Common.isEmpty(lotList)) {
                            lotList = item.getValue("LOT_ID", String.class);
                        } else {
                            lotList += "," + item.getValue("LOT_ID", String.class);
                        }
                    }
                }
                catch (Exception e)
                {

                }
            }
        }
        return lotList;
    }
//Add by zhangchao@2022-12-28 for inline sorter --end

    public List<WIPMLOTTMAST> getSameCarrierLots(String lotId, String sorter_Job_ID) throws ServiceException {
        //#12257 add queue问题点处理
        ArrayList<WIPMLOTTMAST> wipmlottmastlist = new ArrayList<WIPMLOTTMAST>();
        WIPMLOTTMAST wipmlottmast = new WIPMLOTTMAST();
        wipmlottmast.addValue("LOT_ID", lotId);
        WIPMLOTTMAST wipmlottmastResult = tableHelper.selectByKey(WIPMLOTTMAST.class,wipmlottmast,"WIPM-P0044", "WIPM-P0004");
        if(!CommonUtil.isEmpty(wipmlottmastResult.getValue("CARRIER_ID",String.class))){
            wipmlottmastlist.add(wipmlottmastResult);
            WIPMLOTTMAST wipmlottmast1 = new WIPMLOTTMAST();
            wipmlottmast1.addValue("CARRIER_ID", wipmlottmastResult.getValue("CARRIER_ID",String.class));
            wipmlottmast1.addValue("LOT_DEL_YN", ' ');
            wipmlottmast1.addValue("LOT_ID", lotId);
            TableQueryParas tableQueryParas1 = new TableQueryParas();
            tableQueryParas1.addSpecialOperation("LOT_ID", "<>");
            tableQueryParas1.addOrderField("LOT_ID", QueryOrder.QueryOrderType.ASC);
            ArrayList<WIPMLOTTMAST> tempLotList = tableHelper.selectList(WIPMLOTTMAST.class, wipmlottmast1, tableQueryParas1, "WIPM-P0004");
            if(Common.isEmpty(sorter_Job_ID))
            {
                wipmlottmastlist.addAll(tempLotList);
            }
            else
            {//Has Sorter Job: should process has SorterJob Lot in FOUP only
                WIPMSTSJITEM stItem = new WIPMSTSJITEM();
                stItem.addValue("SORTER_JOB_ID", sorter_Job_ID);
                stItem.addValue("FROM_LOT_ID", lotId);
                TableQueryParas paras = new TableQueryParas();
                paras.setDistinct(true);
                paras.addQueryField("FROM_LOT_ID");
                paras.addSpecialOperation("FROM_LOT_ID", "<>");
                paras.addOrderField("FROM_LOT_ID", QueryOrder.QueryOrderType.ASC);
                ArrayList<WIPMSTSJITEM> tempHasSorterLotList = tableHelper.selectList(WIPMSTSJITEM.class, stItem, paras, "WIPM-P0004");

                for (WIPMSTSJITEM itStLot: tempHasSorterLotList)
                {
                    for (WIPMLOTTMAST itInfo: tempLotList)
                    {
                        if(itStLot.getValue("FROM_LOT_ID", String.class).equals(itInfo.getValue("LOT_ID", String.class)))
                        {
                            wipmlottmastlist.add(itInfo);
                            break;//For Performance
                        }
                    }
                }
            }
		}
        return wipmlottmastlist;
	}


//Add by zhangchao@2022-08-31 for Multi-Sorter_Job --start
    public Boolean checkCarrierSlot(String fabName, String lotId, String carrierId) throws ServiceException
    {
        ETCMCARRMAST etcmcarrmast = new ETCMCARRMAST();
        etcmcarrmast.addValue("CARRIER_ID", carrierId);
        ETCMCARRMAST etcmcarrmastResult = tableHelper.selectByKey(ETCMCARRMAST.class, etcmcarrmast, "ETCM-P0057", "ETCM-P0004");
        if(CommonUtil.isEmpty(lotId) && etcmcarrmastResult.getValue("EMPTY_YN",String.class).equals("Y"))
        {//carrier is empty
            return true;
        }
        else
        {
            QueryHelper queryHelper = new QueryHelper(this);
            queryHelper.addParaValues("FACTORY",    fabName);
            queryHelper.addParaValues("LOT",        lotId);
            queryHelper.addParaValues("CARRIER",    carrierId);
            queryHelper.setQueryId("WIPM_S_S_WIPMSLOTMAST_GetUsedSameSlutCount");
            int Cnt = (int)queryHelper.QueryScalar("CNT", "WIPM-P0004");
			
            return (Cnt <= 0);
        }
    }
	
    public String getSorterSubJobId(String fabName, String sorter_jobId, String from_carrierId, String from_lotId) throws ServiceException
    {
        String sorter_sub_jobId = new String();
        QueryHelper queryHelper = new QueryHelper(this);
        queryHelper.addParaValues("FACTORY", fabName);
        queryHelper.addParaValues("SORTER_JOB_ID", sorter_jobId);
        queryHelper.addParaValues("FROM_CARRIER_ID", from_carrierId);
        queryHelper.addParaValues("FROM_LOT_ID", from_lotId);
        queryHelper.setQueryId("WIPM_S_S_WIPMSTSJITEM_getSorterSubJobId");
        TableQueryParas tableQueryParas = new TableQueryParas();
        tableQueryParas.setForceSingleRow(true);
        DbQuery dbQuery = queryHelper.querySingle("", "WIPM-P0004");

        if (dbQuery != null)
        {
            sorter_sub_jobId = dbQuery.getValue("SORTER_SUB_JOB_ID", String.class);
        }
        return sorter_sub_jobId;
    }

    /**
     * FABB #13060 Dummy Exchange Furnace 功能
     * 当前Lot 是Dummy Lot，返回 SEQ = 1 并将同机台下其他Select Lot 的SEQ + 1
     * @param wipmlottmastResult     wipmlottmastResult
     * @param wipmlottselt1 wipmlottselt1
     * @param iSeq iSeq
     * @return Seq
     */
    private int DummyExchangeResetSelectSeq(JsonBean inData, WIPMLOTTMAST wipmlottmastResult, WIPMLOTTSELT wipmlottselt1, int iSeq) throws ServiceException {
        WIPMDMEXDFNT_C wipmdmexdfnt_c = new WIPMDMEXDFNT_C();
        wipmdmexdfnt_c.addValue("FACTORY", JSON.getFactory(inData));
        wipmdmexdfnt_c.addValue("EQUIP_ID", inData.getString("EQUIP_ID"));
        //wipmdmexdfnt_c.addValue("EQUIP_TYPE", "FURNACE");
        TableQueryParas paras = new TableQueryParas();
        paras.setForceSingleRow(true);
        WIPMDMEXDFNT_C wipmdmexdfntCResult = tableHelper.select(WIPMDMEXDFNT_C.class, wipmdmexdfnt_c, paras,  "", "WIPM-P0004");
        if(wipmdmexdfntCResult != null) {
            WIPMDMEXRLTN_C wipmdmexrltn_c = new WIPMDMEXRLTN_C();
            wipmdmexrltn_c.addValue("FACTORY", JSON.getFactory(inData));
            wipmdmexrltn_c.addValue("EQUIP_ID", inData.getString("EQUIP_ID"));
            wipmdmexrltn_c.addValue("FINISH_GOOD_ID", wipmlottmastResult.getValue("FINISH_GOOD_ID", String.class));
            wipmdmexrltn_c.addValue("LOT_PRIORITY", wipmlottmastResult.getValue("LOT_PRIORITY", String.class));
            wipmdmexrltn_c.addValue("INTERNALPRIORITY", wipmlottmastResult.getValue("LOT_USC_14", String.class));
            if( ! "ETCH".equals(wipmdmexdfntCResult.getValue("EQUIP_TYPE", String.class))) {
                wipmdmexrltn_c.addValue("FURNACE_DUMMY_TYPE", wipmlottmastResult.getValue("LOT_TYPE_DETAIL", String.class));
            }
            WIPMDMEXRLTN_C wipmdmexrltnCResult = tableHelper.select(WIPMDMEXRLTN_C.class, wipmdmexrltn_c, paras, "", "WIPM-P0004");

            //Dummy Exchange 校验 Multi Lot In One Foup 场景： 1. Furnace 直接卡； 2. Etch 进一步判断EXCHANGE_FLAG
            if (wipmdmexrltnCResult != null) {
                if("FURNACE".equals(wipmdmexdfntCResult.getValue("EQUIP_TYPE", String.class))){
                    //FABB #13593 校验Multi Lot In One Foup 场景 1. Furnace 直接卡；
                    WIPMLOTTMAST wipmlottmast = new WIPMLOTTMAST();
                    wipmlottmast.addValue("CARRIER_ID", wipmlottmastResult.getValue("CARRIER_ID", String.class));
                    ArrayList<WIPMLOTTMAST> wipmlottmastList = tableHelper.selectList(WIPMLOTTMAST.class, wipmlottmast, new TableQueryParas(), "WIPM-P0004");
                    for (WIPMLOTTMAST lottMast : wipmlottmastList) {
                        //Lot 属性不符
                        if (!(lottMast.getValue("FINISH_GOOD_ID", String.class).equals(wipmdmexrltnCResult.getValue("FINISH_GOOD_ID", String.class))
                                && lottMast.getValue("LOT_PRIORITY", String.class).equals(wipmdmexrltnCResult.getValue("LOT_PRIORITY", String.class))
                                && lottMast.getValue("LOT_USC_14", String.class).equals(wipmdmexrltnCResult.getValue("INTERNALPRIORITY", String.class)))) {
                            throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName() + ".doService", "", "WIPM-P3135",
                                    "FACTORY", JSON.getFactory(inData),
                                    "EQUIP_ID", inData.getString("EQUIP_ID"),
                                    "CARRIER_ID", wipmlottmastResult.getValue("CARRIER_ID", String.class));
                        }
                    }
                }

                if("ETCH".equals(wipmdmexdfntCResult.getValue("EQUIP_TYPE", String.class))){
                    //检查Item 表
                    WIPMDMEXMAST_C wipmdmexmast_c = new WIPMDMEXMAST_C();
                    wipmdmexmast_c.addValue("FACTORY", JSON.getFactory(inData));
                    wipmdmexmast_c.addValue("EQUIP_ID", inData.getString("EQUIP_ID"));
                    //wipmdmexmast_c.addValue("TARGET_CARRIER_ID", wipmlottmastResult.getValue("CARRIER_ID", String.class));
                    wipmdmexmast_c.addValue("EXCHANGE_FLAG",'Y');
                    // wipmdmexmast_c.addValue("TO_EMPTY_CARRIER_ID",wipmlottmastResult.getValue("CARRIER_ID", String.class));
                    WIPMDMEXMAST_C wipmdmexmastCResult = tableHelper.select(WIPMDMEXMAST_C.class, wipmdmexmast_c, paras, "", "WIPM-P0004");

                    if(wipmdmexmastCResult == null){
                        return iSeq;
                    }

                    //FABB #13593 校验Multi Lot In One Foup 场景 2. Etch 进一步判断EXCHANGE_FLAG
                    WIPMLOTTMAST wipmlottmast = new WIPMLOTTMAST();
                    wipmlottmast.addValue("CARRIER_ID", wipmlottmastResult.getValue("CARRIER_ID", String.class));
                    ArrayList<WIPMLOTTMAST> wipmlottmastList = tableHelper.selectList(WIPMLOTTMAST.class, wipmlottmast, new TableQueryParas(), "WIPM-P0004");
                    for (WIPMLOTTMAST lottMast : wipmlottmastList) {
                        //Lot 属性不符
                        if (!(lottMast.getValue("FINISH_GOOD_ID", String.class).equals(wipmdmexrltnCResult.getValue("FINISH_GOOD_ID", String.class))
                                && lottMast.getValue("LOT_PRIORITY", String.class).equals(wipmdmexrltnCResult.getValue("LOT_PRIORITY", String.class))
                                && lottMast.getValue("LOT_USC_14", String.class).equals(wipmdmexrltnCResult.getValue("INTERNALPRIORITY", String.class)))) {
                            throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName() + ".doService", "", "WIPM-P3135",
                                    "FACTORY", JSON.getFactory(inData),
                                    "EQUIP_ID", inData.getString("EQUIP_ID"),
                                    "CARRIER_ID", wipmlottmastResult.getValue("CARRIER_ID", String.class));
                        }
                    }
                    //当前机台已有 Dummy Lot 在Queue 表中，不允许重复Add Queue
                    QueryHelper queryHelper = new QueryHelper(this);
                    queryHelper.setQueryId("WIPM_S_M_WIPMLOTTSELT_viewSelectedDummyLotByEquip");
                    queryHelper.addParaValues("EQUIP_ID", inData.getString("EQUIP_ID"));
                    queryHelper.addParaValues("FACTORY", JSON.getFactory(inData));
                    ArrayList<DbQuery> query = queryHelper.query("WIPM-P0004");
                    if (query.size() != 0) {
                        throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName() + ".doService", "", "WIPM-P3137",
                                "FACTORY", JSON.getFactory(inData),
                                "EQUIP_ID", inData.getString("EQUIP_ID"));
                    }

                    // 1. Direct Exchange  | 2. Out Before In
                    if('2' == wipmdmexdfntCResult.getValue("EXCHANGE_MODE", char.class)){
                        //To Carrier 检查
                        String toCarrierID = wipmdmexmastCResult.getValue("TO_EMPTY_CARRIER_ID", String.class);
                        //Check Carrier and Prd
                        String controlFLag = getGlobalOptionValue3(this, JSON.getFactory(inData), "MP_DummyCarrierPRDControl");
                        if ("Y".equals(controlFLag)){
                            WipmCommonFunction.checkCrrPRD(this,JSON.getFactory(inData),toCarrierID, wipmlottmastResult.getValue("FINISH_GOOD_ID", String.class), true);
                        }
                        if(! (WipmCommonFunction.isCarrierAvailable(this, toCarrierID)
                                && WipmCommonFunction.carrierReserve(this, JSON.getFactory(inData), toCarrierID))){
                            //ToCarrier not null Or Reserve Failed
                            throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName() + ".doService", "", "WIPM-P3135",
                                    "FACTORY", JSON.getFactory(inData),
                                    "EQUIP_ID", inData.getString("EQUIP_ID"),
                                    "CARRIER_ID", wipmlottmastResult.getValue("CARRIER_ID", String.class));
                        }

                        //新增一条Selt 记录Empty Carrier，用于做Dummy Exchange。LOT_ID 为Equip + Carrier 拼接
                        WIPMLOTTSELT wipmlottselt = new WIPMLOTTSELT();
                        wipmlottselt.addValue("FACTORY", JSON.getFactory(inData));
                        wipmlottselt.addValue("LOT_ID", inData.getString("EQUIP_ID") + toCarrierID);
                        wipmlottselt.addValue("EQUIP_ID", inData.getString("EQUIP_ID"));
                        wipmlottselt.addValue("LOT_STATUS", "EMPTY");
                        wipmlottselt.addValue("PORT_ID", inData.getString("PORT_ID"));
                        wipmlottselt.addValue("SOURCE_TYPE", "RTD");
                        wipmlottselt.addValue("CARRIER_ID", toCarrierID);
                        wipmlottselt.addValue("SEQ", 1);
                        wipmlottselt.addValue("SELECT_ID", "S-"+ UUID.randomUUID().toString());
                        wipmlottselt.addValue("CREATE_TIME", ServiceUtil.getSysTime(this));
                        wipmlottselt.addValue("CREATE_USER_ID", JSON.getUser(inData));
                        tableHelper.insert(WIPMLOTTSELT.class, wipmlottselt, "WIPM-P0004");


                        //Record History
                        WIPMSELTHIST wipmselthist = new WIPMSELTHIST();
                        wipmselthist.addValue("FACTORY", JSON.getFactory(inData));
                        wipmselthist.addValue("LOT_ID", inData.getString("EQUIP_ID") + toCarrierID);
                        //wipmselthist.addValue("LOT_STATUS", "SELECT");
                        wipmselthist.addValue("EQUIP_ID", inData.getString("EQUIP_ID"));
                        wipmselthist.addValue("PORT_ID", inData.getString("PORT_ID"));
                        wipmselthist.addValue("SOURCE_TYPE", "RTD");
                        wipmselthist.addValue("CARRIER_ID", toCarrierID);
                        wipmselthist.addValue("TRX_CODE", inData.getString("EMPTY"));
                        wipmselthist.addValue("SEQ", 1);
                        wipmselthist.addValue("SELECT_ID", wipmlottselt.getValue("SELECT_ID", String.class));
                        wipmselthist.addValue("TRX_TIME", ServiceUtil.getSysTime(this));
                        wipmselthist.addValue("TRX_USER", JSON.getUser(inData));
                        tableHelper.insert(WIPMSELTHIST.class, wipmselthist, "WIPM-P0004");
                    }
                }
                // 设置Dummy Lot 的Seq 为 1
                iSeq = 1;
                //FABB #13845 Dummy Exchange Add Queue的时候跳过 PRE_CHECK
                inData.setString("SKIP_PRE_CHECK", "Y");

                ArrayList<WIPMLOTTSELT> wipmlottselts = tableHelper.selectList(WIPMLOTTSELT.class, wipmlottselt1, new TableQueryParas(), "WIPM-P0004");
                for (WIPMLOTTSELT selt : wipmlottselts) {
                    //队列中所有Seq + 1
                    selt.addValue("SEQ", selt.getValue("SEQ", int.class) + 1);
                    WIPMLOTTSELT where = new WIPMLOTTSELT();
                    where.addValue("LOT_ID", selt.getValue("LOT_ID", String.class));
                    where.addValue("LOT_STATUS", "SELECT");
                    tableHelper.update(WIPMLOTTSELT.class, selt, where, "WIPM-P0004");
                    //Record History
                    WIPMSELTHIST wipmselthist = new WIPMSELTHIST();
                    wipmselthist.addValue("LOT_ID", selt.getValue("LOT_ID", String.class));
                    wipmselthist.addValue("SELECT_ID", selt.getValue("SELECT_ID", String.class));
                    int iHistSeq = (int)tableHelper.selectScalar(WIPMSELTHIST.class, wipmselthist, "WIPM-P0004");
                    //Record Hist
                    wipmselthist = new WIPMSELTHIST();
                    wipmselthist.addValue("LOT_ID", selt.getValue("LOT_ID", String.class));
                    wipmselthist.addValue("SELECT_ID", selt.getValue("SELECT_ID", String.class));
                    wipmselthist.addValue("FACTORY", selt.getValue("FACTORY", String.class));
                    wipmselthist.addValue("EQUIP_GRP_ID", selt.getValue("EQUIP_GRP_ID", String.class));
                    wipmselthist.addValue("EQUIP_ID", selt.getValue("EQUIP_ID", String.class));
                    wipmselthist.addValue("PORT_ID", selt.getValue("PORT_ID", String.class));
                    wipmselthist.addValue("SOURCE_TYPE", selt.getValue("SOURCE_TYPE", String.class));
                    wipmselthist.addValue("CARRIER_ID", selt.getValue("CARRIER_ID", String.class));
                    wipmselthist.addValue("RECIPE_ID", selt.getValue("RECIPE_ID", String.class));
                    wipmselthist.addValue("PROC_JOB_ID", selt.getValue("PROC_JOB_ID", String.class));
                    wipmselthist.addValue("SEQ", selt.getValue("SEQ", int.class));
                    wipmselthist.addValue("GROUP_ID", selt.getValue("GROUP_ID", String.class));
                    wipmselthist.addValue("GROUP_PARALLEL", selt.getValue("GROUP_PARALLEL", char.class));
                    wipmselthist.addValue("GROUP_IN_SEQ", selt.getValue("GROUP_IN_SEQ", int.class));
                    wipmselthist.addValue("GROUP_SEASON_LOT_FLAG", selt.getValue("GROUP_SEASON_LOT_FLAG", char.class));
                    wipmselthist.addValue("GROUP_SEASON_JOB_GROUP_ID", selt.getValue("GROUP_SEASON_JOB_GROUP_ID", String.class));
                    wipmselthist.addValue("GROUP_SEASON_JOB_SEQ", selt.getValue("GROUP_SEASON_JOB_SEQ", int.class));
                    wipmselthist.addValue("GROUP_SEASON_JOB_ID", selt.getValue("GROUP_SEASON_JOB_ID", String.class));
                    wipmselthist.addValue("FAIL_REASON_CODE", selt.getValue("FAIL_REASON_CODE", String.class));
                    wipmselthist.addValue("TRX_CODE", "DUMMY");
                    wipmselthist.addValue("HIST_SEQ", iHistSeq + 1);
                    wipmselthist.addValue("TRX_USER", "SYSTEM");
                    wipmselthist.addValue("TRX_TIME", ServiceUtil.getSysTime(this));
                    wipmselthist.addValue("TRX_USC_1", inData.getString("FROM_SOURCE"));
                    wipmselthist.addValue("TRX_USC_2", inData.getString("TRX_USC_2"));
                    wipmselthist.addValue("TRX_USC_3", inData.getString("TRX_USC_3"));
                    wipmselthist.addValue("TRX_USC_4", inData.getString("TRX_USC_4"));
                    wipmselthist.addValue("TRX_USC_5", inData.getString("TRX_USC_5"));
                    wipmselthist.addValue("TRX_USC_6", inData.getString("TRX_USC_6"));
                    wipmselthist.addValue("TRX_USC_7", inData.getString("TRX_USC_7"));
                    wipmselthist.addValue("TRX_USC_8", inData.getString("TRX_USC_8"));
                    wipmselthist.addValue("TRX_USC_9", inData.getString("TRX_USC_9"));
                    wipmselthist.addValue("TRX_USC_10", inData.getString("TRX_USC_10"));
                    wipmselthist.addValue("TRX_USC_11", inData.getString("TRX_USC_11"));
                    wipmselthist.addValue("TRX_USC_12", inData.getString("TRX_USC_12"));
                    wipmselthist.addValue("TRX_USC_13", inData.getString("TRX_USC_13"));
                    wipmselthist.addValue("TRX_USC_14", inData.getString("TRX_USC_14"));
                    wipmselthist.addValue("TRX_USC_15", inData.getString("TRX_USC_15"));
                    wipmselthist.addValue("TRX_USC_16", inData.getString("TRX_USC_16"));
                    wipmselthist.addValue("TRX_USC_17", inData.getString("TRX_USC_17"));
                    wipmselthist.addValue("TRX_USC_18", inData.getString("TRX_USC_18"));
                    wipmselthist.addValue("TRX_USC_19", inData.getString("TRX_USC_19"));
                    wipmselthist.addValue("TRX_USC_20", inData.getString("TRX_USC_20"));
                    wipmselthist.addValue("SORTER_JOB_ID", selt.getValue("SORTER_JOB_ID", String.class));
                    wipmselthist.addValue("SORTER_SUB_JOB_ID", selt.getValue("SORTER_SUB_JOB_ID", String.class));
                    wipmselthist.addValue("TO_CARRIER_ID", selt.getValue("TO_CARRIER_ID", String.class));
                    wipmselthist.addValue("TO_CARRIER_STATUS", selt.getValue("TO_CARRIER_STATUS", String.class));
                    tableHelper.insert(WIPMSELTHIST.class, wipmselthist, "WIPM-P0004");
                }
            }else{
                //但当前机台正在做Etch Dummy Exchange 时只允许 Dummy Lot 做 Add Queue
                WIPMDMEXMAST_C wipmdmexmast_c = new WIPMDMEXMAST_C();
                wipmdmexmast_c.addValue("FACTORY", JSON.getFactory(inData));
                wipmdmexmast_c.addValue("EQUIP_ID", inData.getString("EQUIP_ID"));
                //wipmdmexmast_c.addValue("TARGET_CARRIER_ID", wipmlottmastResult.getValue("CARRIER_ID", String.class));
                wipmdmexmast_c.addValue("EXCHANGE_FLAG",'Y');
                // wipmdmexmast_c.addValue("TO_EMPTY_CARRIER_ID",wipmlottmastResult.getValue("CARRIER_ID", String.class));
                WIPMDMEXMAST_C wipmdmexmastCResult = tableHelper.select(WIPMDMEXMAST_C.class, wipmdmexmast_c, paras, "", "WIPM-P0004");

                if(wipmdmexmastCResult != null){
                    throw new ServiceException(GCDef.SERVICE_LOGIC_ERROR, this.getClass().getSimpleName() + ".doService", "", "WIPM-P3140",
                            "FACTORY", JSON.getFactory(inData),
                            "EQUIP_ID", inData.getString("EQUIP_ID"));
                }
            }
        }
        return iSeq;
    }

//Add by zhangchao@2023-01-06 For Sorter --start
    private HashMap<String, String> getLotSorterJobIsSplit2ChangeFlag_Map(JsonBean inData) throws ServiceException
    {
        HashMap<String, String> lotId_sorterJobIsSplit2Change = new HashMap<>();
        for(JsonBean lotinfo: inData.getList("LOT_LIST"))
        {
            if (!Common.isEmpty(lotinfo.getString("SORTER_JOB_ID")))
            {
                WIPMSTJBDFNT wipmstjbdfnt = new WIPMSTJBDFNT();
                wipmstjbdfnt.addValue("FACTORY",JSON.getFactory(inData));
                wipmstjbdfnt.addValue("SORTER_JOB_ID",lotinfo.getString("SORTER_JOB_ID"));
                WIPMSTJBDFNT rstSorterJob = tableHelper.selectByKey(WIPMSTJBDFNT.class, wipmstjbdfnt, "WIPM-P0736", "WIPM-P0004");

                lotId_sorterJobIsSplit2Change.put(lotinfo.getString("LOT_ID"), rstSorterJob.getValue("JOB_USC_2", String.class));
            }
        }
        return lotId_sorterJobIsSplit2Change;
    }

    private boolean checkSorterToCarrier(JsonBean inData, HashMap<String, String> lotId_fromCarrier) throws ServiceException
    {
        for(JsonBean lotinfo: inData.getList("LOT_LIST"))
        {
            if (!Common.isEmpty(lotinfo.getString("SORTER_JOB_ID")))
            {
                JsonBean toCarrierIndata = new JsonBean();
                JsonBean toCarrierOutdata = new JsonBean();
                JSON.copyInParas(inData, toCarrierIndata);
                JSON.setProcStep(toCarrierIndata, '1');
                toCarrierIndata.setString("EQUIP_ID", inData.getString("EQUIP_ID"));
                toCarrierIndata.setString("SORTJOB_ID", lotinfo.getString("SORTER_JOB_ID"));
                toCarrierIndata.setString("CARRIER_ID", lotId_fromCarrier.get(lotinfo.getString("LOT_ID")));
                toCarrierIndata.setString("TO_CARRIER_ID", lotinfo.getString("TO_CARRIER_ID"));
                toCarrierIndata.setString("OPERATOR_ID", JSON.getUser(inData));

                toCarrierIndata.setString("SORTER_SUB_JOB_ID",
                        getSorterSubJobId(JSON.getFactory(inData),
                                lotinfo.getString("SORTER_JOB_ID"),
                                lotId_fromCarrier.get(lotinfo.getString("LOT_ID")),
                                lotinfo.getString("LOT_ID")));
                AbstractMesService seasontype = ServiceMapper.getServiceObject("EISM", "E2MCheckSorterToCarrier");
                seasontype.innerCall(this, toCarrierIndata, toCarrierOutdata);
            }
        }
        return true;
    }

    private HashMap<String, String> getLotCarrierMap_CheckCarrierType(JsonBean inData) throws ServiceException
    {
        HashMap<String, String> lotId_carrierId = new HashMap<>();
        for(JsonBean lotinfo: inData.getList("LOT_LIST"))
        {
            if (!Common.isEmpty(lotinfo.getString("SORTER_JOB_ID")))
            {
                WIPMLOTTMAST lotMast = new WIPMLOTTMAST();
                lotMast.addValue("LOT_ID", lotinfo.getString("LOT_ID"));
                WIPMLOTTMAST lotMastRst = tableHelper.selectByKey(WIPMLOTTMAST.class, lotMast, "WIPM-P0044", "WIPM-P0004");

                WIPMOPERDFNT wipmoperdfnt = new WIPMOPERDFNT();
                wipmoperdfnt.addValue("FACTORY", JSON.getFactory(inData));
                wipmoperdfnt.addValue("OPER", lotMastRst.getValue("OPER", String.class));
                WIPMOPERDFNT wipmoperdfntResult = tableHelper.selectByKey(WIPMOPERDFNT.class, wipmoperdfnt,
                        "WIPM-P0010", "WIPM-P0004");

                if (wipmoperdfntResult.getValue("OPER_GRP_1", String.class).equals("ST"))
                {
                    sien.wipm.WipmCommonFunction.CheckEquipTransferType(this, inData, lotMastRst.getValue("CARRIER_ID", String.class), inData.getString("EQUIP_ID"));
                }

                lotId_carrierId.put(lotinfo.getString("LOT_ID"), lotMastRst.getValue("CARRIER_ID", String.class));
            }
        }
        return lotId_carrierId;
    }

    private String checkSplit2ChangeInSameFOUP(JsonBean inData, HashMap<String, String> lotId_fromCarrier, HashMap<String, String> lotId_sorterJobIsSplitChange) throws ServiceException
    {
        HashMap<String, String> fromCarrier_toCarrier = new HashMap<>();
        String splitLotList = "";
        for(JsonBean lotinfo: inData.getList("LOT_LIST"))
        {
            if (lotId_sorterJobIsSplitChange.get(lotinfo.getString("LOT_ID")) != null && !Common.isEmpty(lotinfo.getString("SORTER_JOB_ID")))
            {
                if(lotId_sorterJobIsSplitChange.get(lotinfo.getString("LOT_ID")).equals("Y"))
                {
                    if(fromCarrier_toCarrier.size() > 0)
                    {
                        if(fromCarrier_toCarrier.get(lotId_fromCarrier.get(lotinfo.getString("LOT_ID"))).equals(lotinfo.getString("TO_CARRIER_ID")))
                        {//Split 的 Change 同 FOUP 内存在 ToCarrierId 一样的情况
                            if(Common.isEmpty(splitLotList))
                            {
                                splitLotList += lotinfo.getString("LOT_ID");
                            }
                            else
                            {
                                splitLotList += "; " + lotinfo.getString("LOT_ID");
                            }
                        }
                    }
                    else
                    {
                        fromCarrier_toCarrier.put(lotId_fromCarrier.get(lotinfo.getString("LOT_ID")), lotinfo.getString("TO_CARRIER_ID"));
                    }
                }
            }
        }
        return splitLotList;
    }

    private void removeSameSorterJobInSameFOUP_ChangeLot(JsonBean inData, HashMap<String, String> lotId_Carrier, HashMap<String, String> lotId_sorterJobIsSplitChange)
    {
        JsonBeanList resultLotList = new JsonBeanList();
        HashMap<String, String> sorterJobFromCarrier = new HashMap<>();//Key-Value: SorterJobId-FromCarrierID
        HashMap<String, String> sorterJobFrom_toCarrier = new HashMap<>();//Key-Value: SorterJobIdFromCarrier-ToCarrierID
        boolean needRemoveSameCarrierLot = false;
        ArrayList<String> needRemoveLot = new ArrayList<String>();
        for(JsonBean lotinfo: inData.getList("LOT_LIST")) {
            if(!Common.isEmpty(lotinfo.getString("SORTER_JOB_ID")))
            {
                if(lotId_sorterJobIsSplitChange.get(lotinfo.getString("LOT_ID")).equals("Y"))
                {//Split 出来的 TranType 为 CHANGE的情况
                    continue;
                }

                if(sorterJobFromCarrier.size() > 0
                        && sorterJobFromCarrier.get(lotinfo.getString("SORTER_JOB_ID")).equals(lotId_Carrier.get(lotinfo.getString("LOT_ID")))
                        && sorterJobFrom_toCarrier.size() > 0
                        && sorterJobFrom_toCarrier.get(lotinfo.getString("SORTER_JOB_ID")+lotId_Carrier.get(lotinfo.getString("LOT_ID"))).equals(lotinfo.getString("TO_CARRIER_ID")))
                {// SorterJobId 和 FromCarrierId 都相同, 且不是 SPLIT 出来的 CHANGE
                    needRemoveSameCarrierLot = true;
                    needRemoveLot.add(lotinfo.getString("LOT_ID"));
                }
                else
                {
                    sorterJobFromCarrier.put(lotinfo.getString("SORTER_JOB_ID"), lotId_Carrier.get(lotinfo.getString("LOT_ID")));
                    sorterJobFrom_toCarrier.put(lotinfo.getString("SORTER_JOB_ID")+lotId_Carrier.get(lotinfo.getString("LOT_ID")), lotinfo.getString("TO_CARRIER_ID"));
                }
            }
        }

        if(needRemoveSameCarrierLot)
        {
            for (JsonBean lotinfor1 : inData.getList("LOT_LIST"))
            {
                if(needRemoveLot.contains(lotinfor1.getString("LOT_ID")))
                {
                    continue;
                }
                resultLotList.addJsonBean(lotinfor1);
            }
        }
        if(0 == resultLotList.size())
            resultLotList = inData.getList("LOT_LIST");
        inData.setList("LOT_LIST", resultLotList);
    }

//Add by zhangchao@2023-01-06 For Sorter --end


    /**
     * FABB #14047 计算将待操作Lot 在Queue 中的Seq， 放与Season 后， 其他Lot 前
     * @param inData inData
     * @param sameFoupLotsCount sameFoupLotsCount
     * @param equipID equipID
     * @return New Seq
     */
    private int absolutePriority(JsonBean inData, int sameFoupLotsCount, String equipID, int iSeq) throws ServiceException {
        String P0004 = "WIPM-P0004";

        WIPMLOTTSELT wipmlottselt1 = new WIPMLOTTSELT();
        wipmlottselt1.addValue("EQUIP_ID", equipID);
        wipmlottselt1.addValue("LOT_STATUS", "SELECT");
        TableQueryParas paras1 = new TableQueryParas();
        paras1.addOrderField("SEQ", QueryOrder.QueryOrderType.ASC);
        paras1.setForceSingleRow(true);
        WIPMLOTTSELT select1 = tableHelper.select(WIPMLOTTSELT.class, wipmlottselt1, paras1, "", P0004);
        if(select1 != null){
            iSeq = select1.getValue("SEQ", int.class);
        }

        //1. 获取队列中是否有已Absolute 的Lot
        WIPMLOTTSELT wipmlottselt = new WIPMLOTTSELT();
        wipmlottselt.addValue("EQUIP_ID", equipID);
        wipmlottselt.addValue("LOT_STATUS", "SELECT");
        wipmlottselt.addValue("SELECT_LOT_USC_6", "Y");
        TableQueryParas paras = new TableQueryParas();
        paras.addOrderField("SEQ", QueryOrder.QueryOrderType.DESC);
        paras.setForceSingleRow(true);
        WIPMLOTTSELT select = tableHelper.select(WIPMLOTTSELT.class, wipmlottselt, paras, "", P0004);

        if(select != null){
            //1.1 有 -> 获取最大值
            iSeq = select.getValue("SEQ", int.class) + 1;
        }else{
            //1.2 没有，获取Season Lot 与Season Prd
            wipmlottselt.removeValue("SELECT_LOT_USC_6");
            wipmlottselt.addValue("LOT_STATUS", "SELECT");
            wipmlottselt.addValue("GROUP_SEASON_LOT_FLAG", "Y");
            select = tableHelper.select(WIPMLOTTSELT.class, wipmlottselt, paras, "", P0004);
            if(select != null){
                iSeq = select.getValue("SEQ", int.class) + 1;
                //同 Group 下的所有Lot
                wipmlottselt.removeValue("GROUP_SEASON_LOT_FLAG");
                wipmlottselt.addValue("LOT_STATUS", "SELECT");
                wipmlottselt.addValue("GROUP_ID", select.getValue("GROUP_ID", String.class));
                select = tableHelper.select(WIPMLOTTSELT.class, wipmlottselt, paras, "", P0004);
                if(select != null){
                    iSeq = select.getValue("SEQ", int.class) + 1;
                }
            }
        }
        wipmlottselt = new WIPMLOTTSELT();
        wipmlottselt.addValue("EQUIP_ID", equipID);
        wipmlottselt.addValue("LOT_STATUS", "SELECT");
        wipmlottselt.addValue("SEQ", iSeq);
        select = tableHelper.select(WIPMLOTTSELT.class, wipmlottselt, paras, "", P0004);
        if(select == null){
            //当前位置空余，直接插入
            return iSeq;
        }
        //2. 后续Lot Seq += Same_Foup_Lots_Count
        wipmlottselt.addValue("SEQ", iSeq - 1);
        TableQueryParas queryParas = new TableQueryParas();
        queryParas.addSpecialOperation("SEQ", ">");
        queryParas.addOrderField("LOT_ID", QueryOrder.QueryOrderType.ASC);
        ArrayList<WIPMLOTTSELT> selts = tableHelper.selectList(WIPMLOTTSELT.class, wipmlottselt, queryParas, P0004);
        for (WIPMLOTTSELT selt : selts) {
            selt.addValue("SEQ", selt.getValue("SEQ", int.class) + 1);
            selt.addValue("UPDATE_USER_ID", "SYSTEM");
            selt.addValue("UPDATE_TIME", ServiceUtil.getSysTime(this));
            tableHelper.updateByKey(WIPMLOTTSELT.class, selt, P0004);

            //3. Record Hist
            WIPMSELTHIST wipmselthist = new WIPMSELTHIST();
            wipmselthist.addValue("LOT_ID", selt.getValue("LOT_ID", String.class));
            wipmselthist.addValue("SELECT_ID", selt.getValue("SELECT_ID", String.class));

            queryParas = new TableQueryParas();
            queryParas.setForceSingleRow(true);
            queryParas.addOrderField("HIST_SEQ", QueryOrder.QueryOrderType.DESC);
            WIPMSELTHIST seltHist = tableHelper.select(WIPMSELTHIST.class, wipmselthist, queryParas, "", P0004);

            seltHist.addValue("SEQ", selt.getValue("SEQ", int.class));
            seltHist.addValue("HIST_SEQ", seltHist.getValue("HIST_SEQ", int.class) + 1);
            seltHist.addValue("TRX_CODE", "ABSOLUTE");
            seltHist.addValue("TRX_USER", "SYSTEM");
            seltHist.addValue("TRX_TIME", ServiceUtil.getSysTime(this));
            tableHelper.insert(WIPMSELTHIST.class, seltHist, P0004);

            //adapt Lot
            JsonBean adaptLotIn = new JsonBean();
            JsonBean adaptLotOut = new JsonBean();
            JSON.copyInParas(inData, adaptLotIn);
            JSON.setProcStep(adaptLotIn, '1');
            adaptLotIn.setString("LOT_ID", selt.getValue("LOT_ID", String.class));
            adaptLotIn.setChar("__SKIP_HOLD_CHECK", 'Y');
            adaptLotIn.setChar("NO_CHECK_BATCH_FLAG", 'Y');
            adaptLotIn.setChar("NO_CHECK_BATCH_PTRO_FLAG", 'Y');
            adaptLotIn.setChar("ADD_HIS_FLAG", 'Y');
            adaptLotIn.setString("ADAPT_TRX_CODE", "ADJUST_QUEUE");
            adaptLotIn.setString("COMMENT", "Adjust Queue When RTD Has IS_ABSOLUTE_PRIORITY.");
            AbstractMesService wipmAdaptLotExtSvr = ServiceMapper.getServiceObject("WIPM", "WipmAdaptLotExt");
            wipmAdaptLotExtSvr.innerCall(this, adaptLotIn, adaptLotOut);

        }
        return iSeq;
    }

    /**
     * etch 根据apc返回信息查询pj保存
     * @param subEqpList
     * @return
     */
    private JsonBeanList getPJBySubEquip(JsonBeanList subEqpList){
        JsonBeanList list = new JsonBeanList();
        for (JsonBean jsonBean : subEqpList) {
            if (!"ACTIVE".equals(jsonBean.getString("STATUS"))){
                JsonBean jsonBean1 = new JsonBean();
                jsonBean1.setChar("SUB_EQP_ID", jsonBean.getString("SUB_EQP_ID").charAt(jsonBean.getString("SUB_EQP_ID").length() - 1));
                list.addJsonBean(jsonBean1);
            }
        }
        return list;
    }
}
